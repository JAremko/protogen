// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_system.proto

package system

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	types "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = types.JonGuiDataSystemLocalizations(0)
)

// Validate checks the field values on Root with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Root) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Root with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RootMultiError, or nil if none found.
func (m *Root) ValidateAll() error {
	return m.validate(true)
}

func (m *Root) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Root_StartAll:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartAll()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartAll",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartAll",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartAll()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StartAll",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StopAll:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStopAll()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StopAll",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StopAll",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStopAll()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StopAll",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Reboot:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReboot()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Reboot",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Reboot",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReboot()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Reboot",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_PowerOff:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPowerOff()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "PowerOff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "PowerOff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPowerOff()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "PowerOff",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Localization:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLocalization()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Localization",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Localization",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocalization()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Localization",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_ResetConfigs:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResetConfigs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ResetConfigs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ResetConfigs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResetConfigs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "ResetConfigs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StartRec:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartRec()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartRec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartRec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartRec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StartRec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StopRec:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStopRec()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StopRec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StopRec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStopRec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StopRec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_MarkRecImportant:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMarkRecImportant()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "MarkRecImportant",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "MarkRecImportant",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMarkRecImportant()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "MarkRecImportant",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_UnmarkRecImportant:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUnmarkRecImportant()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "UnmarkRecImportant",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "UnmarkRecImportant",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnmarkRecImportant()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "UnmarkRecImportant",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_EnterTransport:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnterTransport()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "EnterTransport",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "EnterTransport",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnterTransport()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "EnterTransport",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_GeodesicModeEnable:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGeodesicModeEnable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GeodesicModeEnable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GeodesicModeEnable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGeodesicModeEnable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "GeodesicModeEnable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_GeodesicModeDisable:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGeodesicModeDisable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GeodesicModeDisable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GeodesicModeDisable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGeodesicModeDisable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "GeodesicModeDisable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RootMultiError(errors)
	}

	return nil
}

// RootMultiError is an error wrapping multiple validation errors returned by
// Root.ValidateAll() if the designated constraints aren't met.
type RootMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RootMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RootMultiError) AllErrors() []error { return m }

// RootValidationError is the validation error returned by Root.Validate if the
// designated constraints aren't met.
type RootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RootValidationError) ErrorName() string { return "RootValidationError" }

// Error satisfies the builtin error interface
func (e RootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RootValidationError{}

// Validate checks the field values on StartALl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartALl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartALl with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartALlMultiError, or nil
// if none found.
func (m *StartALl) ValidateAll() error {
	return m.validate(true)
}

func (m *StartALl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartALlMultiError(errors)
	}

	return nil
}

// StartALlMultiError is an error wrapping multiple validation errors returned
// by StartALl.ValidateAll() if the designated constraints aren't met.
type StartALlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartALlMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartALlMultiError) AllErrors() []error { return m }

// StartALlValidationError is the validation error returned by
// StartALl.Validate if the designated constraints aren't met.
type StartALlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartALlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartALlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartALlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartALlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartALlValidationError) ErrorName() string { return "StartALlValidationError" }

// Error satisfies the builtin error interface
func (e StartALlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartALl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartALlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartALlValidationError{}

// Validate checks the field values on StopALl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StopALl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopALl with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StopALlMultiError, or nil if none found.
func (m *StopALl) ValidateAll() error {
	return m.validate(true)
}

func (m *StopALl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopALlMultiError(errors)
	}

	return nil
}

// StopALlMultiError is an error wrapping multiple validation errors returned
// by StopALl.ValidateAll() if the designated constraints aren't met.
type StopALlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopALlMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopALlMultiError) AllErrors() []error { return m }

// StopALlValidationError is the validation error returned by StopALl.Validate
// if the designated constraints aren't met.
type StopALlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopALlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopALlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopALlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopALlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopALlValidationError) ErrorName() string { return "StopALlValidationError" }

// Error satisfies the builtin error interface
func (e StopALlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopALl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopALlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopALlValidationError{}

// Validate checks the field values on Reboot with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reboot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reboot with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RebootMultiError, or nil if none found.
func (m *Reboot) ValidateAll() error {
	return m.validate(true)
}

func (m *Reboot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RebootMultiError(errors)
	}

	return nil
}

// RebootMultiError is an error wrapping multiple validation errors returned by
// Reboot.ValidateAll() if the designated constraints aren't met.
type RebootMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootMultiError) AllErrors() []error { return m }

// RebootValidationError is the validation error returned by Reboot.Validate if
// the designated constraints aren't met.
type RebootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootValidationError) ErrorName() string { return "RebootValidationError" }

// Error satisfies the builtin error interface
func (e RebootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReboot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootValidationError{}

// Validate checks the field values on PowerOff with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PowerOff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PowerOff with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PowerOffMultiError, or nil
// if none found.
func (m *PowerOff) ValidateAll() error {
	return m.validate(true)
}

func (m *PowerOff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PowerOffMultiError(errors)
	}

	return nil
}

// PowerOffMultiError is an error wrapping multiple validation errors returned
// by PowerOff.ValidateAll() if the designated constraints aren't met.
type PowerOffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PowerOffMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PowerOffMultiError) AllErrors() []error { return m }

// PowerOffValidationError is the validation error returned by
// PowerOff.Validate if the designated constraints aren't met.
type PowerOffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PowerOffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PowerOffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PowerOffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PowerOffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PowerOffValidationError) ErrorName() string { return "PowerOffValidationError" }

// Error satisfies the builtin error interface
func (e PowerOffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPowerOff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PowerOffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PowerOffValidationError{}

// Validate checks the field values on ResetConfigs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetConfigs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetConfigs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetConfigsMultiError, or
// nil if none found.
func (m *ResetConfigs) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetConfigs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetConfigsMultiError(errors)
	}

	return nil
}

// ResetConfigsMultiError is an error wrapping multiple validation errors
// returned by ResetConfigs.ValidateAll() if the designated constraints aren't met.
type ResetConfigsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetConfigsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetConfigsMultiError) AllErrors() []error { return m }

// ResetConfigsValidationError is the validation error returned by
// ResetConfigs.Validate if the designated constraints aren't met.
type ResetConfigsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetConfigsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetConfigsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetConfigsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetConfigsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetConfigsValidationError) ErrorName() string { return "ResetConfigsValidationError" }

// Error satisfies the builtin error interface
func (e ResetConfigsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetConfigs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetConfigsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetConfigsValidationError{}

// Validate checks the field values on StartRec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartRec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartRecMultiError, or nil
// if none found.
func (m *StartRec) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartRecMultiError(errors)
	}

	return nil
}

// StartRecMultiError is an error wrapping multiple validation errors returned
// by StartRec.ValidateAll() if the designated constraints aren't met.
type StartRecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRecMultiError) AllErrors() []error { return m }

// StartRecValidationError is the validation error returned by
// StartRec.Validate if the designated constraints aren't met.
type StartRecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRecValidationError) ErrorName() string { return "StartRecValidationError" }

// Error satisfies the builtin error interface
func (e StartRecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRecValidationError{}

// Validate checks the field values on StopRec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StopRec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopRec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StopRecMultiError, or nil if none found.
func (m *StopRec) ValidateAll() error {
	return m.validate(true)
}

func (m *StopRec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopRecMultiError(errors)
	}

	return nil
}

// StopRecMultiError is an error wrapping multiple validation errors returned
// by StopRec.ValidateAll() if the designated constraints aren't met.
type StopRecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopRecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopRecMultiError) AllErrors() []error { return m }

// StopRecValidationError is the validation error returned by StopRec.Validate
// if the designated constraints aren't met.
type StopRecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopRecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopRecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopRecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopRecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopRecValidationError) ErrorName() string { return "StopRecValidationError" }

// Error satisfies the builtin error interface
func (e StopRecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopRec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopRecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopRecValidationError{}

// Validate checks the field values on MarkRecImportant with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarkRecImportant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkRecImportant with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkRecImportantMultiError, or nil if none found.
func (m *MarkRecImportant) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkRecImportant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarkRecImportantMultiError(errors)
	}

	return nil
}

// MarkRecImportantMultiError is an error wrapping multiple validation errors
// returned by MarkRecImportant.ValidateAll() if the designated constraints
// aren't met.
type MarkRecImportantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkRecImportantMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkRecImportantMultiError) AllErrors() []error { return m }

// MarkRecImportantValidationError is the validation error returned by
// MarkRecImportant.Validate if the designated constraints aren't met.
type MarkRecImportantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkRecImportantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkRecImportantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkRecImportantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkRecImportantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkRecImportantValidationError) ErrorName() string { return "MarkRecImportantValidationError" }

// Error satisfies the builtin error interface
func (e MarkRecImportantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkRecImportant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkRecImportantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkRecImportantValidationError{}

// Validate checks the field values on UnmarkRecImportant with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnmarkRecImportant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnmarkRecImportant with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnmarkRecImportantMultiError, or nil if none found.
func (m *UnmarkRecImportant) ValidateAll() error {
	return m.validate(true)
}

func (m *UnmarkRecImportant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnmarkRecImportantMultiError(errors)
	}

	return nil
}

// UnmarkRecImportantMultiError is an error wrapping multiple validation errors
// returned by UnmarkRecImportant.ValidateAll() if the designated constraints
// aren't met.
type UnmarkRecImportantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnmarkRecImportantMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnmarkRecImportantMultiError) AllErrors() []error { return m }

// UnmarkRecImportantValidationError is the validation error returned by
// UnmarkRecImportant.Validate if the designated constraints aren't met.
type UnmarkRecImportantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnmarkRecImportantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnmarkRecImportantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnmarkRecImportantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnmarkRecImportantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnmarkRecImportantValidationError) ErrorName() string {
	return "UnmarkRecImportantValidationError"
}

// Error satisfies the builtin error interface
func (e UnmarkRecImportantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnmarkRecImportant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnmarkRecImportantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnmarkRecImportantValidationError{}

// Validate checks the field values on EnterTransport with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnterTransport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnterTransport with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnterTransportMultiError,
// or nil if none found.
func (m *EnterTransport) ValidateAll() error {
	return m.validate(true)
}

func (m *EnterTransport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnterTransportMultiError(errors)
	}

	return nil
}

// EnterTransportMultiError is an error wrapping multiple validation errors
// returned by EnterTransport.ValidateAll() if the designated constraints
// aren't met.
type EnterTransportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnterTransportMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnterTransportMultiError) AllErrors() []error { return m }

// EnterTransportValidationError is the validation error returned by
// EnterTransport.Validate if the designated constraints aren't met.
type EnterTransportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnterTransportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnterTransportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnterTransportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnterTransportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnterTransportValidationError) ErrorName() string { return "EnterTransportValidationError" }

// Error satisfies the builtin error interface
func (e EnterTransportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnterTransport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnterTransportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnterTransportValidationError{}

// Validate checks the field values on EnableGeodesicMode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableGeodesicMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableGeodesicMode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableGeodesicModeMultiError, or nil if none found.
func (m *EnableGeodesicMode) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableGeodesicMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableGeodesicModeMultiError(errors)
	}

	return nil
}

// EnableGeodesicModeMultiError is an error wrapping multiple validation errors
// returned by EnableGeodesicMode.ValidateAll() if the designated constraints
// aren't met.
type EnableGeodesicModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableGeodesicModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableGeodesicModeMultiError) AllErrors() []error { return m }

// EnableGeodesicModeValidationError is the validation error returned by
// EnableGeodesicMode.Validate if the designated constraints aren't met.
type EnableGeodesicModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableGeodesicModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableGeodesicModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableGeodesicModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableGeodesicModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableGeodesicModeValidationError) ErrorName() string {
	return "EnableGeodesicModeValidationError"
}

// Error satisfies the builtin error interface
func (e EnableGeodesicModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableGeodesicMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableGeodesicModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableGeodesicModeValidationError{}

// Validate checks the field values on DisableGeodesicMode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableGeodesicMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableGeodesicMode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableGeodesicModeMultiError, or nil if none found.
func (m *DisableGeodesicMode) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableGeodesicMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableGeodesicModeMultiError(errors)
	}

	return nil
}

// DisableGeodesicModeMultiError is an error wrapping multiple validation
// errors returned by DisableGeodesicMode.ValidateAll() if the designated
// constraints aren't met.
type DisableGeodesicModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableGeodesicModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableGeodesicModeMultiError) AllErrors() []error { return m }

// DisableGeodesicModeValidationError is the validation error returned by
// DisableGeodesicMode.Validate if the designated constraints aren't met.
type DisableGeodesicModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableGeodesicModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableGeodesicModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableGeodesicModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableGeodesicModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableGeodesicModeValidationError) ErrorName() string {
	return "DisableGeodesicModeValidationError"
}

// Error satisfies the builtin error interface
func (e DisableGeodesicModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableGeodesicMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableGeodesicModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableGeodesicModeValidationError{}

// Validate checks the field values on SetLocalization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetLocalization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLocalization with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetLocalizationMultiError, or nil if none found.
func (m *SetLocalization) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLocalization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Loc

	if len(errors) > 0 {
		return SetLocalizationMultiError(errors)
	}

	return nil
}

// SetLocalizationMultiError is an error wrapping multiple validation errors
// returned by SetLocalization.ValidateAll() if the designated constraints
// aren't met.
type SetLocalizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLocalizationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLocalizationMultiError) AllErrors() []error { return m }

// SetLocalizationValidationError is the validation error returned by
// SetLocalization.Validate if the designated constraints aren't met.
type SetLocalizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLocalizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLocalizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLocalizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLocalizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLocalizationValidationError) ErrorName() string { return "SetLocalizationValidationError" }

// Error satisfies the builtin error interface
func (e SetLocalizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLocalization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLocalizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLocalizationValidationError{}
