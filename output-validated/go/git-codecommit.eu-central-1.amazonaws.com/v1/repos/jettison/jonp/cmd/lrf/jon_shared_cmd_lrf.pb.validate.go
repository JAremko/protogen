// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_lrf.proto

package lrf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	types "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = types.JonGuiDataLrfScanModes(0)
)

// Validate checks the field values on Root with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Root) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Root with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RootMultiError, or nil if none found.
func (m *Root) ValidateAll() error {
	return m.validate(true)
}

func (m *Root) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Root_Measure:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMeasure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Measure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Measure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMeasure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Measure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_ScanOn:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScanOn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ScanOn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ScanOn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScanOn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "ScanOn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_ScanOff:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScanOff()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ScanOff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ScanOff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScanOff()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "ScanOff",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Start:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Stop:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStop()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStop()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Stop",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_TargetDesignatorOff:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetDesignatorOff()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "TargetDesignatorOff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "TargetDesignatorOff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetDesignatorOff()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "TargetDesignatorOff",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_TargetDesignatorOnModeA:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetDesignatorOnModeA()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "TargetDesignatorOnModeA",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "TargetDesignatorOnModeA",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetDesignatorOnModeA()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "TargetDesignatorOnModeA",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_TargetDesignatorOnModeB:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetDesignatorOnModeB()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "TargetDesignatorOnModeB",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "TargetDesignatorOnModeB",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetDesignatorOnModeB()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "TargetDesignatorOnModeB",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_EnableFogMode:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnableFogMode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "EnableFogMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "EnableFogMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnableFogMode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "EnableFogMode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_DisableFogMode:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDisableFogMode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DisableFogMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DisableFogMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDisableFogMode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "DisableFogMode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetScanMode:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetScanMode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetScanMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetScanMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetScanMode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetScanMode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_NewSession:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNewSession()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "NewSession",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "NewSession",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNewSession()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "NewSession",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_GetMeteo:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetMeteo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GetMeteo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GetMeteo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetMeteo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "GetMeteo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_RefineOn:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRefineOn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "RefineOn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "RefineOn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRefineOn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "RefineOn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_RefineOff:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRefineOff()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "RefineOff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "RefineOff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRefineOff()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "RefineOff",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RootMultiError(errors)
	}

	return nil
}

// RootMultiError is an error wrapping multiple validation errors returned by
// Root.ValidateAll() if the designated constraints aren't met.
type RootMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RootMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RootMultiError) AllErrors() []error { return m }

// RootValidationError is the validation error returned by Root.Validate if the
// designated constraints aren't met.
type RootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RootValidationError) ErrorName() string { return "RootValidationError" }

// Error satisfies the builtin error interface
func (e RootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RootValidationError{}

// Validate checks the field values on GetMeteo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeteo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeteo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeteoMultiError, or nil
// if none found.
func (m *GetMeteo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeteo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMeteoMultiError(errors)
	}

	return nil
}

// GetMeteoMultiError is an error wrapping multiple validation errors returned
// by GetMeteo.ValidateAll() if the designated constraints aren't met.
type GetMeteoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeteoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeteoMultiError) AllErrors() []error { return m }

// GetMeteoValidationError is the validation error returned by
// GetMeteo.Validate if the designated constraints aren't met.
type GetMeteoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeteoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeteoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeteoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeteoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeteoValidationError) ErrorName() string { return "GetMeteoValidationError" }

// Error satisfies the builtin error interface
func (e GetMeteoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeteo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeteoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeteoValidationError{}

// Validate checks the field values on Start with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Start) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Start with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StartMultiError, or nil if none found.
func (m *Start) ValidateAll() error {
	return m.validate(true)
}

func (m *Start) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartMultiError(errors)
	}

	return nil
}

// StartMultiError is an error wrapping multiple validation errors returned by
// Start.ValidateAll() if the designated constraints aren't met.
type StartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMultiError) AllErrors() []error { return m }

// StartValidationError is the validation error returned by Start.Validate if
// the designated constraints aren't met.
type StartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartValidationError) ErrorName() string { return "StartValidationError" }

// Error satisfies the builtin error interface
func (e StartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartValidationError{}

// Validate checks the field values on Stop with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Stop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stop with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StopMultiError, or nil if none found.
func (m *Stop) ValidateAll() error {
	return m.validate(true)
}

func (m *Stop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopMultiError(errors)
	}

	return nil
}

// StopMultiError is an error wrapping multiple validation errors returned by
// Stop.ValidateAll() if the designated constraints aren't met.
type StopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopMultiError) AllErrors() []error { return m }

// StopValidationError is the validation error returned by Stop.Validate if the
// designated constraints aren't met.
type StopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopValidationError) ErrorName() string { return "StopValidationError" }

// Error satisfies the builtin error interface
func (e StopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopValidationError{}

// Validate checks the field values on Measure with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Measure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Measure with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MeasureMultiError, or nil if none found.
func (m *Measure) ValidateAll() error {
	return m.validate(true)
}

func (m *Measure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MeasureMultiError(errors)
	}

	return nil
}

// MeasureMultiError is an error wrapping multiple validation errors returned
// by Measure.ValidateAll() if the designated constraints aren't met.
type MeasureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeasureMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeasureMultiError) AllErrors() []error { return m }

// MeasureValidationError is the validation error returned by Measure.Validate
// if the designated constraints aren't met.
type MeasureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasureValidationError) ErrorName() string { return "MeasureValidationError" }

// Error satisfies the builtin error interface
func (e MeasureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasureValidationError{}

// Validate checks the field values on ScanOn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScanOn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanOn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScanOnMultiError, or nil if none found.
func (m *ScanOn) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanOn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScanOnMultiError(errors)
	}

	return nil
}

// ScanOnMultiError is an error wrapping multiple validation errors returned by
// ScanOn.ValidateAll() if the designated constraints aren't met.
type ScanOnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanOnMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanOnMultiError) AllErrors() []error { return m }

// ScanOnValidationError is the validation error returned by ScanOn.Validate if
// the designated constraints aren't met.
type ScanOnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanOnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanOnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanOnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanOnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanOnValidationError) ErrorName() string { return "ScanOnValidationError" }

// Error satisfies the builtin error interface
func (e ScanOnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanOn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanOnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanOnValidationError{}

// Validate checks the field values on ScanOff with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScanOff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanOff with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScanOffMultiError, or nil if none found.
func (m *ScanOff) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanOff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScanOffMultiError(errors)
	}

	return nil
}

// ScanOffMultiError is an error wrapping multiple validation errors returned
// by ScanOff.ValidateAll() if the designated constraints aren't met.
type ScanOffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanOffMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanOffMultiError) AllErrors() []error { return m }

// ScanOffValidationError is the validation error returned by ScanOff.Validate
// if the designated constraints aren't met.
type ScanOffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanOffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanOffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanOffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanOffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanOffValidationError) ErrorName() string { return "ScanOffValidationError" }

// Error satisfies the builtin error interface
func (e ScanOffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanOff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanOffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanOffValidationError{}

// Validate checks the field values on RefineOff with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefineOff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefineOff with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefineOffMultiError, or nil
// if none found.
func (m *RefineOff) ValidateAll() error {
	return m.validate(true)
}

func (m *RefineOff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefineOffMultiError(errors)
	}

	return nil
}

// RefineOffMultiError is an error wrapping multiple validation errors returned
// by RefineOff.ValidateAll() if the designated constraints aren't met.
type RefineOffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefineOffMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefineOffMultiError) AllErrors() []error { return m }

// RefineOffValidationError is the validation error returned by
// RefineOff.Validate if the designated constraints aren't met.
type RefineOffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefineOffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefineOffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefineOffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefineOffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefineOffValidationError) ErrorName() string { return "RefineOffValidationError" }

// Error satisfies the builtin error interface
func (e RefineOffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefineOff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefineOffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefineOffValidationError{}

// Validate checks the field values on RefineOn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefineOn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefineOn with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefineOnMultiError, or nil
// if none found.
func (m *RefineOn) ValidateAll() error {
	return m.validate(true)
}

func (m *RefineOn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefineOnMultiError(errors)
	}

	return nil
}

// RefineOnMultiError is an error wrapping multiple validation errors returned
// by RefineOn.ValidateAll() if the designated constraints aren't met.
type RefineOnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefineOnMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefineOnMultiError) AllErrors() []error { return m }

// RefineOnValidationError is the validation error returned by
// RefineOn.Validate if the designated constraints aren't met.
type RefineOnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefineOnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefineOnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefineOnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefineOnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefineOnValidationError) ErrorName() string { return "RefineOnValidationError" }

// Error satisfies the builtin error interface
func (e RefineOnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefineOn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefineOnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefineOnValidationError{}

// Validate checks the field values on TargetDesignatorOff with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetDesignatorOff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetDesignatorOff with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetDesignatorOffMultiError, or nil if none found.
func (m *TargetDesignatorOff) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetDesignatorOff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TargetDesignatorOffMultiError(errors)
	}

	return nil
}

// TargetDesignatorOffMultiError is an error wrapping multiple validation
// errors returned by TargetDesignatorOff.ValidateAll() if the designated
// constraints aren't met.
type TargetDesignatorOffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetDesignatorOffMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetDesignatorOffMultiError) AllErrors() []error { return m }

// TargetDesignatorOffValidationError is the validation error returned by
// TargetDesignatorOff.Validate if the designated constraints aren't met.
type TargetDesignatorOffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetDesignatorOffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetDesignatorOffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetDesignatorOffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetDesignatorOffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetDesignatorOffValidationError) ErrorName() string {
	return "TargetDesignatorOffValidationError"
}

// Error satisfies the builtin error interface
func (e TargetDesignatorOffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetDesignatorOff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetDesignatorOffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetDesignatorOffValidationError{}

// Validate checks the field values on TargetDesignatorOnModeA with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetDesignatorOnModeA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetDesignatorOnModeA with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetDesignatorOnModeAMultiError, or nil if none found.
func (m *TargetDesignatorOnModeA) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetDesignatorOnModeA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TargetDesignatorOnModeAMultiError(errors)
	}

	return nil
}

// TargetDesignatorOnModeAMultiError is an error wrapping multiple validation
// errors returned by TargetDesignatorOnModeA.ValidateAll() if the designated
// constraints aren't met.
type TargetDesignatorOnModeAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetDesignatorOnModeAMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetDesignatorOnModeAMultiError) AllErrors() []error { return m }

// TargetDesignatorOnModeAValidationError is the validation error returned by
// TargetDesignatorOnModeA.Validate if the designated constraints aren't met.
type TargetDesignatorOnModeAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetDesignatorOnModeAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetDesignatorOnModeAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetDesignatorOnModeAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetDesignatorOnModeAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetDesignatorOnModeAValidationError) ErrorName() string {
	return "TargetDesignatorOnModeAValidationError"
}

// Error satisfies the builtin error interface
func (e TargetDesignatorOnModeAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetDesignatorOnModeA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetDesignatorOnModeAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetDesignatorOnModeAValidationError{}

// Validate checks the field values on TargetDesignatorOnModeB with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetDesignatorOnModeB) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetDesignatorOnModeB with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetDesignatorOnModeBMultiError, or nil if none found.
func (m *TargetDesignatorOnModeB) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetDesignatorOnModeB) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TargetDesignatorOnModeBMultiError(errors)
	}

	return nil
}

// TargetDesignatorOnModeBMultiError is an error wrapping multiple validation
// errors returned by TargetDesignatorOnModeB.ValidateAll() if the designated
// constraints aren't met.
type TargetDesignatorOnModeBMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetDesignatorOnModeBMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetDesignatorOnModeBMultiError) AllErrors() []error { return m }

// TargetDesignatorOnModeBValidationError is the validation error returned by
// TargetDesignatorOnModeB.Validate if the designated constraints aren't met.
type TargetDesignatorOnModeBValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetDesignatorOnModeBValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetDesignatorOnModeBValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetDesignatorOnModeBValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetDesignatorOnModeBValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetDesignatorOnModeBValidationError) ErrorName() string {
	return "TargetDesignatorOnModeBValidationError"
}

// Error satisfies the builtin error interface
func (e TargetDesignatorOnModeBValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetDesignatorOnModeB.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetDesignatorOnModeBValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetDesignatorOnModeBValidationError{}

// Validate checks the field values on EnableFogMode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnableFogMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableFogMode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnableFogModeMultiError, or
// nil if none found.
func (m *EnableFogMode) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableFogMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableFogModeMultiError(errors)
	}

	return nil
}

// EnableFogModeMultiError is an error wrapping multiple validation errors
// returned by EnableFogMode.ValidateAll() if the designated constraints
// aren't met.
type EnableFogModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableFogModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableFogModeMultiError) AllErrors() []error { return m }

// EnableFogModeValidationError is the validation error returned by
// EnableFogMode.Validate if the designated constraints aren't met.
type EnableFogModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableFogModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableFogModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableFogModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableFogModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableFogModeValidationError) ErrorName() string { return "EnableFogModeValidationError" }

// Error satisfies the builtin error interface
func (e EnableFogModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableFogMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableFogModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableFogModeValidationError{}

// Validate checks the field values on DisableFogMode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisableFogMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableFogMode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisableFogModeMultiError,
// or nil if none found.
func (m *DisableFogMode) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableFogMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableFogModeMultiError(errors)
	}

	return nil
}

// DisableFogModeMultiError is an error wrapping multiple validation errors
// returned by DisableFogMode.ValidateAll() if the designated constraints
// aren't met.
type DisableFogModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableFogModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableFogModeMultiError) AllErrors() []error { return m }

// DisableFogModeValidationError is the validation error returned by
// DisableFogMode.Validate if the designated constraints aren't met.
type DisableFogModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableFogModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableFogModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableFogModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableFogModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableFogModeValidationError) ErrorName() string { return "DisableFogModeValidationError" }

// Error satisfies the builtin error interface
func (e DisableFogModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableFogMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableFogModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableFogModeValidationError{}

// Validate checks the field values on SetScanMode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetScanMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetScanMode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetScanModeMultiError, or
// nil if none found.
func (m *SetScanMode) ValidateAll() error {
	return m.validate(true)
}

func (m *SetScanMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	if len(errors) > 0 {
		return SetScanModeMultiError(errors)
	}

	return nil
}

// SetScanModeMultiError is an error wrapping multiple validation errors
// returned by SetScanMode.ValidateAll() if the designated constraints aren't met.
type SetScanModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetScanModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetScanModeMultiError) AllErrors() []error { return m }

// SetScanModeValidationError is the validation error returned by
// SetScanMode.Validate if the designated constraints aren't met.
type SetScanModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetScanModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetScanModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetScanModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetScanModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetScanModeValidationError) ErrorName() string { return "SetScanModeValidationError" }

// Error satisfies the builtin error interface
func (e SetScanModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetScanMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetScanModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetScanModeValidationError{}

// Validate checks the field values on NewSession with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewSession) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewSession with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewSessionMultiError, or
// nil if none found.
func (m *NewSession) ValidateAll() error {
	return m.validate(true)
}

func (m *NewSession) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NewSessionMultiError(errors)
	}

	return nil
}

// NewSessionMultiError is an error wrapping multiple validation errors
// returned by NewSession.ValidateAll() if the designated constraints aren't met.
type NewSessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewSessionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewSessionMultiError) AllErrors() []error { return m }

// NewSessionValidationError is the validation error returned by
// NewSession.Validate if the designated constraints aren't met.
type NewSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewSessionValidationError) ErrorName() string { return "NewSessionValidationError" }

// Error satisfies the builtin error interface
func (e NewSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewSessionValidationError{}
