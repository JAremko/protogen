// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_cv.proto

package cv

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	types "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = types.JonGuiDataVideoChannel(0)
)

// Validate checks the field values on Root with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Root) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Root with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RootMultiError, or nil if none found.
func (m *Root) ValidateAll() error {
	return m.validate(true)
}

func (m *Root) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Root_SetAutoFocus:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetAutoFocus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetAutoFocus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetAutoFocus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetAutoFocus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetAutoFocus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StartTrackNdc:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartTrackNdc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartTrackNdc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartTrackNdc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTrackNdc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StartTrackNdc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StopTrack:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStopTrack()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StopTrack",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StopTrack",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStopTrack()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StopTrack",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_VampireModeEnable:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVampireModeEnable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "VampireModeEnable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "VampireModeEnable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVampireModeEnable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "VampireModeEnable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_VampireModeDisable:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVampireModeDisable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "VampireModeDisable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "VampireModeDisable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVampireModeDisable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "VampireModeDisable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StabilizationModeEnable:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStabilizationModeEnable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StabilizationModeEnable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StabilizationModeEnable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStabilizationModeEnable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StabilizationModeEnable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StabilizationModeDisable:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStabilizationModeDisable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StabilizationModeDisable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StabilizationModeDisable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStabilizationModeDisable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StabilizationModeDisable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_DumpStart:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDumpStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DumpStart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DumpStart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDumpStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "DumpStart",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_DumpStop:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDumpStop()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DumpStop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DumpStop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDumpStop()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "DumpStop",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RootMultiError(errors)
	}

	return nil
}

// RootMultiError is an error wrapping multiple validation errors returned by
// Root.ValidateAll() if the designated constraints aren't met.
type RootMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RootMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RootMultiError) AllErrors() []error { return m }

// RootValidationError is the validation error returned by Root.Validate if the
// designated constraints aren't met.
type RootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RootValidationError) ErrorName() string { return "RootValidationError" }

// Error satisfies the builtin error interface
func (e RootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RootValidationError{}

// Validate checks the field values on VampireModeEnable with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VampireModeEnable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VampireModeEnable with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VampireModeEnableMultiError, or nil if none found.
func (m *VampireModeEnable) ValidateAll() error {
	return m.validate(true)
}

func (m *VampireModeEnable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VampireModeEnableMultiError(errors)
	}

	return nil
}

// VampireModeEnableMultiError is an error wrapping multiple validation errors
// returned by VampireModeEnable.ValidateAll() if the designated constraints
// aren't met.
type VampireModeEnableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VampireModeEnableMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VampireModeEnableMultiError) AllErrors() []error { return m }

// VampireModeEnableValidationError is the validation error returned by
// VampireModeEnable.Validate if the designated constraints aren't met.
type VampireModeEnableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VampireModeEnableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VampireModeEnableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VampireModeEnableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VampireModeEnableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VampireModeEnableValidationError) ErrorName() string {
	return "VampireModeEnableValidationError"
}

// Error satisfies the builtin error interface
func (e VampireModeEnableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVampireModeEnable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VampireModeEnableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VampireModeEnableValidationError{}

// Validate checks the field values on DumpStart with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DumpStart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpStart with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DumpStartMultiError, or nil
// if none found.
func (m *DumpStart) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpStart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DumpStartMultiError(errors)
	}

	return nil
}

// DumpStartMultiError is an error wrapping multiple validation errors returned
// by DumpStart.ValidateAll() if the designated constraints aren't met.
type DumpStartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpStartMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpStartMultiError) AllErrors() []error { return m }

// DumpStartValidationError is the validation error returned by
// DumpStart.Validate if the designated constraints aren't met.
type DumpStartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpStartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpStartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpStartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpStartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpStartValidationError) ErrorName() string { return "DumpStartValidationError" }

// Error satisfies the builtin error interface
func (e DumpStartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpStart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpStartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpStartValidationError{}

// Validate checks the field values on DumpStop with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DumpStop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpStop with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DumpStopMultiError, or nil
// if none found.
func (m *DumpStop) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpStop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DumpStopMultiError(errors)
	}

	return nil
}

// DumpStopMultiError is an error wrapping multiple validation errors returned
// by DumpStop.ValidateAll() if the designated constraints aren't met.
type DumpStopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpStopMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpStopMultiError) AllErrors() []error { return m }

// DumpStopValidationError is the validation error returned by
// DumpStop.Validate if the designated constraints aren't met.
type DumpStopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpStopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpStopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpStopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpStopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpStopValidationError) ErrorName() string { return "DumpStopValidationError" }

// Error satisfies the builtin error interface
func (e DumpStopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpStop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpStopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpStopValidationError{}

// Validate checks the field values on VampireModeDisable with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VampireModeDisable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VampireModeDisable with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VampireModeDisableMultiError, or nil if none found.
func (m *VampireModeDisable) ValidateAll() error {
	return m.validate(true)
}

func (m *VampireModeDisable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VampireModeDisableMultiError(errors)
	}

	return nil
}

// VampireModeDisableMultiError is an error wrapping multiple validation errors
// returned by VampireModeDisable.ValidateAll() if the designated constraints
// aren't met.
type VampireModeDisableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VampireModeDisableMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VampireModeDisableMultiError) AllErrors() []error { return m }

// VampireModeDisableValidationError is the validation error returned by
// VampireModeDisable.Validate if the designated constraints aren't met.
type VampireModeDisableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VampireModeDisableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VampireModeDisableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VampireModeDisableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VampireModeDisableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VampireModeDisableValidationError) ErrorName() string {
	return "VampireModeDisableValidationError"
}

// Error satisfies the builtin error interface
func (e VampireModeDisableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVampireModeDisable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VampireModeDisableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VampireModeDisableValidationError{}

// Validate checks the field values on StabilizationModeEnable with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StabilizationModeEnable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StabilizationModeEnable with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StabilizationModeEnableMultiError, or nil if none found.
func (m *StabilizationModeEnable) ValidateAll() error {
	return m.validate(true)
}

func (m *StabilizationModeEnable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StabilizationModeEnableMultiError(errors)
	}

	return nil
}

// StabilizationModeEnableMultiError is an error wrapping multiple validation
// errors returned by StabilizationModeEnable.ValidateAll() if the designated
// constraints aren't met.
type StabilizationModeEnableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StabilizationModeEnableMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StabilizationModeEnableMultiError) AllErrors() []error { return m }

// StabilizationModeEnableValidationError is the validation error returned by
// StabilizationModeEnable.Validate if the designated constraints aren't met.
type StabilizationModeEnableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StabilizationModeEnableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StabilizationModeEnableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StabilizationModeEnableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StabilizationModeEnableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StabilizationModeEnableValidationError) ErrorName() string {
	return "StabilizationModeEnableValidationError"
}

// Error satisfies the builtin error interface
func (e StabilizationModeEnableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStabilizationModeEnable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StabilizationModeEnableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StabilizationModeEnableValidationError{}

// Validate checks the field values on StabilizationModeDisable with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StabilizationModeDisable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StabilizationModeDisable with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StabilizationModeDisableMultiError, or nil if none found.
func (m *StabilizationModeDisable) ValidateAll() error {
	return m.validate(true)
}

func (m *StabilizationModeDisable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StabilizationModeDisableMultiError(errors)
	}

	return nil
}

// StabilizationModeDisableMultiError is an error wrapping multiple validation
// errors returned by StabilizationModeDisable.ValidateAll() if the designated
// constraints aren't met.
type StabilizationModeDisableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StabilizationModeDisableMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StabilizationModeDisableMultiError) AllErrors() []error { return m }

// StabilizationModeDisableValidationError is the validation error returned by
// StabilizationModeDisable.Validate if the designated constraints aren't met.
type StabilizationModeDisableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StabilizationModeDisableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StabilizationModeDisableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StabilizationModeDisableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StabilizationModeDisableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StabilizationModeDisableValidationError) ErrorName() string {
	return "StabilizationModeDisableValidationError"
}

// Error satisfies the builtin error interface
func (e StabilizationModeDisableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStabilizationModeDisable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StabilizationModeDisableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StabilizationModeDisableValidationError{}

// Validate checks the field values on SetAutoFocus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetAutoFocus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAutoFocus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetAutoFocusMultiError, or
// nil if none found.
func (m *SetAutoFocus) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAutoFocus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for Value

	if len(errors) > 0 {
		return SetAutoFocusMultiError(errors)
	}

	return nil
}

// SetAutoFocusMultiError is an error wrapping multiple validation errors
// returned by SetAutoFocus.ValidateAll() if the designated constraints aren't met.
type SetAutoFocusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAutoFocusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAutoFocusMultiError) AllErrors() []error { return m }

// SetAutoFocusValidationError is the validation error returned by
// SetAutoFocus.Validate if the designated constraints aren't met.
type SetAutoFocusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAutoFocusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAutoFocusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAutoFocusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAutoFocusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAutoFocusValidationError) ErrorName() string { return "SetAutoFocusValidationError" }

// Error satisfies the builtin error interface
func (e SetAutoFocusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAutoFocus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAutoFocusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAutoFocusValidationError{}

// Validate checks the field values on StartTrackNDC with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartTrackNDC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartTrackNDC with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartTrackNDCMultiError, or
// nil if none found.
func (m *StartTrackNDC) ValidateAll() error {
	return m.validate(true)
}

func (m *StartTrackNDC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for FrameTime

	if len(errors) > 0 {
		return StartTrackNDCMultiError(errors)
	}

	return nil
}

// StartTrackNDCMultiError is an error wrapping multiple validation errors
// returned by StartTrackNDC.ValidateAll() if the designated constraints
// aren't met.
type StartTrackNDCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartTrackNDCMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartTrackNDCMultiError) AllErrors() []error { return m }

// StartTrackNDCValidationError is the validation error returned by
// StartTrackNDC.Validate if the designated constraints aren't met.
type StartTrackNDCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartTrackNDCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartTrackNDCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartTrackNDCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartTrackNDCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartTrackNDCValidationError) ErrorName() string { return "StartTrackNDCValidationError" }

// Error satisfies the builtin error interface
func (e StartTrackNDCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartTrackNDC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartTrackNDCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartTrackNDCValidationError{}

// Validate checks the field values on StopTrack with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StopTrack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopTrack with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StopTrackMultiError, or nil
// if none found.
func (m *StopTrack) ValidateAll() error {
	return m.validate(true)
}

func (m *StopTrack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopTrackMultiError(errors)
	}

	return nil
}

// StopTrackMultiError is an error wrapping multiple validation errors returned
// by StopTrack.ValidateAll() if the designated constraints aren't met.
type StopTrackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopTrackMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopTrackMultiError) AllErrors() []error { return m }

// StopTrackValidationError is the validation error returned by
// StopTrack.Validate if the designated constraints aren't met.
type StopTrackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopTrackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopTrackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopTrackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopTrackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopTrackValidationError) ErrorName() string { return "StopTrackValidationError" }

// Error satisfies the builtin error interface
func (e StopTrackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopTrack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopTrackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopTrackValidationError{}
