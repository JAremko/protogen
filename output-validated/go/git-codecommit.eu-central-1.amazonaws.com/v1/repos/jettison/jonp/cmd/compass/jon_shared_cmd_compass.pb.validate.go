// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_compass.proto

package compass

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Root with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Root) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Root with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RootMultiError, or nil if none found.
func (m *Root) ValidateAll() error {
	return m.validate(true)
}

func (m *Root) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Root_Start:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Stop:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStop()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStop()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Stop",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetMagneticDeclination:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetMagneticDeclination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetMagneticDeclination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetMagneticDeclination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetMagneticDeclination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetMagneticDeclination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetOffsetAngleAzimuth:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetOffsetAngleAzimuth()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetOffsetAngleAzimuth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetOffsetAngleAzimuth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetOffsetAngleAzimuth()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetOffsetAngleAzimuth",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetOffsetAngleElevation:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetOffsetAngleElevation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetOffsetAngleElevation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetOffsetAngleElevation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetOffsetAngleElevation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetOffsetAngleElevation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetUseRotaryPosition:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetUseRotaryPosition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetUseRotaryPosition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetUseRotaryPosition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetUseRotaryPosition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetUseRotaryPosition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StartCalibrateLong:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartCalibrateLong()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartCalibrateLong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartCalibrateLong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartCalibrateLong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StartCalibrateLong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_StartCalibrateShort:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartCalibrateShort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartCalibrateShort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "StartCalibrateShort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartCalibrateShort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "StartCalibrateShort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_CalibrateNext:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCalibrateNext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "CalibrateNext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "CalibrateNext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCalibrateNext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "CalibrateNext",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_CalibrateCencel:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCalibrateCencel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "CalibrateCencel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "CalibrateCencel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCalibrateCencel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "CalibrateCencel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_GetMeteo:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetMeteo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GetMeteo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GetMeteo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetMeteo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "GetMeteo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RootMultiError(errors)
	}

	return nil
}

// RootMultiError is an error wrapping multiple validation errors returned by
// Root.ValidateAll() if the designated constraints aren't met.
type RootMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RootMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RootMultiError) AllErrors() []error { return m }

// RootValidationError is the validation error returned by Root.Validate if the
// designated constraints aren't met.
type RootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RootValidationError) ErrorName() string { return "RootValidationError" }

// Error satisfies the builtin error interface
func (e RootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RootValidationError{}

// Validate checks the field values on Start with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Start) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Start with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StartMultiError, or nil if none found.
func (m *Start) ValidateAll() error {
	return m.validate(true)
}

func (m *Start) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartMultiError(errors)
	}

	return nil
}

// StartMultiError is an error wrapping multiple validation errors returned by
// Start.ValidateAll() if the designated constraints aren't met.
type StartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMultiError) AllErrors() []error { return m }

// StartValidationError is the validation error returned by Start.Validate if
// the designated constraints aren't met.
type StartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartValidationError) ErrorName() string { return "StartValidationError" }

// Error satisfies the builtin error interface
func (e StartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartValidationError{}

// Validate checks the field values on Stop with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Stop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stop with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StopMultiError, or nil if none found.
func (m *Stop) ValidateAll() error {
	return m.validate(true)
}

func (m *Stop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopMultiError(errors)
	}

	return nil
}

// StopMultiError is an error wrapping multiple validation errors returned by
// Stop.ValidateAll() if the designated constraints aren't met.
type StopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopMultiError) AllErrors() []error { return m }

// StopValidationError is the validation error returned by Stop.Validate if the
// designated constraints aren't met.
type StopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopValidationError) ErrorName() string { return "StopValidationError" }

// Error satisfies the builtin error interface
func (e StopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopValidationError{}

// Validate checks the field values on Next with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Next) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Next with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NextMultiError, or nil if none found.
func (m *Next) ValidateAll() error {
	return m.validate(true)
}

func (m *Next) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NextMultiError(errors)
	}

	return nil
}

// NextMultiError is an error wrapping multiple validation errors returned by
// Next.ValidateAll() if the designated constraints aren't met.
type NextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextMultiError) AllErrors() []error { return m }

// NextValidationError is the validation error returned by Next.Validate if the
// designated constraints aren't met.
type NextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextValidationError) ErrorName() string { return "NextValidationError" }

// Error satisfies the builtin error interface
func (e NextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextValidationError{}

// Validate checks the field values on CalibrateStartLong with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalibrateStartLong) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalibrateStartLong with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalibrateStartLongMultiError, or nil if none found.
func (m *CalibrateStartLong) ValidateAll() error {
	return m.validate(true)
}

func (m *CalibrateStartLong) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CalibrateStartLongMultiError(errors)
	}

	return nil
}

// CalibrateStartLongMultiError is an error wrapping multiple validation errors
// returned by CalibrateStartLong.ValidateAll() if the designated constraints
// aren't met.
type CalibrateStartLongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalibrateStartLongMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalibrateStartLongMultiError) AllErrors() []error { return m }

// CalibrateStartLongValidationError is the validation error returned by
// CalibrateStartLong.Validate if the designated constraints aren't met.
type CalibrateStartLongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalibrateStartLongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalibrateStartLongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalibrateStartLongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalibrateStartLongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalibrateStartLongValidationError) ErrorName() string {
	return "CalibrateStartLongValidationError"
}

// Error satisfies the builtin error interface
func (e CalibrateStartLongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalibrateStartLong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalibrateStartLongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalibrateStartLongValidationError{}

// Validate checks the field values on CalibrateStartShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalibrateStartShort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalibrateStartShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalibrateStartShortMultiError, or nil if none found.
func (m *CalibrateStartShort) ValidateAll() error {
	return m.validate(true)
}

func (m *CalibrateStartShort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CalibrateStartShortMultiError(errors)
	}

	return nil
}

// CalibrateStartShortMultiError is an error wrapping multiple validation
// errors returned by CalibrateStartShort.ValidateAll() if the designated
// constraints aren't met.
type CalibrateStartShortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalibrateStartShortMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalibrateStartShortMultiError) AllErrors() []error { return m }

// CalibrateStartShortValidationError is the validation error returned by
// CalibrateStartShort.Validate if the designated constraints aren't met.
type CalibrateStartShortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalibrateStartShortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalibrateStartShortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalibrateStartShortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalibrateStartShortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalibrateStartShortValidationError) ErrorName() string {
	return "CalibrateStartShortValidationError"
}

// Error satisfies the builtin error interface
func (e CalibrateStartShortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalibrateStartShort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalibrateStartShortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalibrateStartShortValidationError{}

// Validate checks the field values on CalibrateNext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CalibrateNext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalibrateNext with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CalibrateNextMultiError, or
// nil if none found.
func (m *CalibrateNext) ValidateAll() error {
	return m.validate(true)
}

func (m *CalibrateNext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CalibrateNextMultiError(errors)
	}

	return nil
}

// CalibrateNextMultiError is an error wrapping multiple validation errors
// returned by CalibrateNext.ValidateAll() if the designated constraints
// aren't met.
type CalibrateNextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalibrateNextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalibrateNextMultiError) AllErrors() []error { return m }

// CalibrateNextValidationError is the validation error returned by
// CalibrateNext.Validate if the designated constraints aren't met.
type CalibrateNextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalibrateNextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalibrateNextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalibrateNextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalibrateNextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalibrateNextValidationError) ErrorName() string { return "CalibrateNextValidationError" }

// Error satisfies the builtin error interface
func (e CalibrateNextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalibrateNext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalibrateNextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalibrateNextValidationError{}

// Validate checks the field values on CalibrateCencel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CalibrateCencel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalibrateCencel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalibrateCencelMultiError, or nil if none found.
func (m *CalibrateCencel) ValidateAll() error {
	return m.validate(true)
}

func (m *CalibrateCencel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CalibrateCencelMultiError(errors)
	}

	return nil
}

// CalibrateCencelMultiError is an error wrapping multiple validation errors
// returned by CalibrateCencel.ValidateAll() if the designated constraints
// aren't met.
type CalibrateCencelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalibrateCencelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalibrateCencelMultiError) AllErrors() []error { return m }

// CalibrateCencelValidationError is the validation error returned by
// CalibrateCencel.Validate if the designated constraints aren't met.
type CalibrateCencelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalibrateCencelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalibrateCencelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalibrateCencelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalibrateCencelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalibrateCencelValidationError) ErrorName() string { return "CalibrateCencelValidationError" }

// Error satisfies the builtin error interface
func (e CalibrateCencelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalibrateCencel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalibrateCencelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalibrateCencelValidationError{}

// Validate checks the field values on GetMeteo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeteo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeteo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeteoMultiError, or nil
// if none found.
func (m *GetMeteo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeteo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMeteoMultiError(errors)
	}

	return nil
}

// GetMeteoMultiError is an error wrapping multiple validation errors returned
// by GetMeteo.ValidateAll() if the designated constraints aren't met.
type GetMeteoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeteoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeteoMultiError) AllErrors() []error { return m }

// GetMeteoValidationError is the validation error returned by
// GetMeteo.Validate if the designated constraints aren't met.
type GetMeteoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeteoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeteoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeteoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeteoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeteoValidationError) ErrorName() string { return "GetMeteoValidationError" }

// Error satisfies the builtin error interface
func (e GetMeteoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeteo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeteoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeteoValidationError{}

// Validate checks the field values on SetMagneticDeclination with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMagneticDeclination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMagneticDeclination with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMagneticDeclinationMultiError, or nil if none found.
func (m *SetMagneticDeclination) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMagneticDeclination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetMagneticDeclinationMultiError(errors)
	}

	return nil
}

// SetMagneticDeclinationMultiError is an error wrapping multiple validation
// errors returned by SetMagneticDeclination.ValidateAll() if the designated
// constraints aren't met.
type SetMagneticDeclinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMagneticDeclinationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMagneticDeclinationMultiError) AllErrors() []error { return m }

// SetMagneticDeclinationValidationError is the validation error returned by
// SetMagneticDeclination.Validate if the designated constraints aren't met.
type SetMagneticDeclinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMagneticDeclinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMagneticDeclinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMagneticDeclinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMagneticDeclinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMagneticDeclinationValidationError) ErrorName() string {
	return "SetMagneticDeclinationValidationError"
}

// Error satisfies the builtin error interface
func (e SetMagneticDeclinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMagneticDeclination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMagneticDeclinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMagneticDeclinationValidationError{}

// Validate checks the field values on SetOffsetAngleAzimuth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOffsetAngleAzimuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOffsetAngleAzimuth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOffsetAngleAzimuthMultiError, or nil if none found.
func (m *SetOffsetAngleAzimuth) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOffsetAngleAzimuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetOffsetAngleAzimuthMultiError(errors)
	}

	return nil
}

// SetOffsetAngleAzimuthMultiError is an error wrapping multiple validation
// errors returned by SetOffsetAngleAzimuth.ValidateAll() if the designated
// constraints aren't met.
type SetOffsetAngleAzimuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOffsetAngleAzimuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOffsetAngleAzimuthMultiError) AllErrors() []error { return m }

// SetOffsetAngleAzimuthValidationError is the validation error returned by
// SetOffsetAngleAzimuth.Validate if the designated constraints aren't met.
type SetOffsetAngleAzimuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOffsetAngleAzimuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOffsetAngleAzimuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOffsetAngleAzimuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOffsetAngleAzimuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOffsetAngleAzimuthValidationError) ErrorName() string {
	return "SetOffsetAngleAzimuthValidationError"
}

// Error satisfies the builtin error interface
func (e SetOffsetAngleAzimuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOffsetAngleAzimuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOffsetAngleAzimuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOffsetAngleAzimuthValidationError{}

// Validate checks the field values on SetOffsetAngleElevation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOffsetAngleElevation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOffsetAngleElevation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOffsetAngleElevationMultiError, or nil if none found.
func (m *SetOffsetAngleElevation) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOffsetAngleElevation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetOffsetAngleElevationMultiError(errors)
	}

	return nil
}

// SetOffsetAngleElevationMultiError is an error wrapping multiple validation
// errors returned by SetOffsetAngleElevation.ValidateAll() if the designated
// constraints aren't met.
type SetOffsetAngleElevationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOffsetAngleElevationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOffsetAngleElevationMultiError) AllErrors() []error { return m }

// SetOffsetAngleElevationValidationError is the validation error returned by
// SetOffsetAngleElevation.Validate if the designated constraints aren't met.
type SetOffsetAngleElevationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOffsetAngleElevationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOffsetAngleElevationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOffsetAngleElevationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOffsetAngleElevationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOffsetAngleElevationValidationError) ErrorName() string {
	return "SetOffsetAngleElevationValidationError"
}

// Error satisfies the builtin error interface
func (e SetOffsetAngleElevationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOffsetAngleElevation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOffsetAngleElevationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOffsetAngleElevationValidationError{}

// Validate checks the field values on SetUseRotaryPosition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUseRotaryPosition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUseRotaryPosition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUseRotaryPositionMultiError, or nil if none found.
func (m *SetUseRotaryPosition) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUseRotaryPosition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Flag

	if len(errors) > 0 {
		return SetUseRotaryPositionMultiError(errors)
	}

	return nil
}

// SetUseRotaryPositionMultiError is an error wrapping multiple validation
// errors returned by SetUseRotaryPosition.ValidateAll() if the designated
// constraints aren't met.
type SetUseRotaryPositionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUseRotaryPositionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUseRotaryPositionMultiError) AllErrors() []error { return m }

// SetUseRotaryPositionValidationError is the validation error returned by
// SetUseRotaryPosition.Validate if the designated constraints aren't met.
type SetUseRotaryPositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUseRotaryPositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUseRotaryPositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUseRotaryPositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUseRotaryPositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUseRotaryPositionValidationError) ErrorName() string {
	return "SetUseRotaryPositionValidationError"
}

// Error satisfies the builtin error interface
func (e SetUseRotaryPositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUseRotaryPosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUseRotaryPositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUseRotaryPositionValidationError{}
