// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_day_camera.proto

package day_camera

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	types "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = types.JonGuiDataFxModeDay(0)
)

// Validate checks the field values on SetValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetValueMultiError, or nil
// if none found.
func (m *SetValue) ValidateAll() error {
	return m.validate(true)
}

func (m *SetValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetValueMultiError(errors)
	}

	return nil
}

// SetValueMultiError is an error wrapping multiple validation errors returned
// by SetValue.ValidateAll() if the designated constraints aren't met.
type SetValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetValueMultiError) AllErrors() []error { return m }

// SetValueValidationError is the validation error returned by
// SetValue.Validate if the designated constraints aren't met.
type SetValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetValueValidationError) ErrorName() string { return "SetValueValidationError" }

// Error satisfies the builtin error interface
func (e SetValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetValueValidationError{}

// Validate checks the field values on Move with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Move) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Move with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MoveMultiError, or nil if none found.
func (m *Move) ValidateAll() error {
	return m.validate(true)
}

func (m *Move) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetValue

	// no validation rules for Speed

	if len(errors) > 0 {
		return MoveMultiError(errors)
	}

	return nil
}

// MoveMultiError is an error wrapping multiple validation errors returned by
// Move.ValidateAll() if the designated constraints aren't met.
type MoveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveMultiError) AllErrors() []error { return m }

// MoveValidationError is the validation error returned by Move.Validate if the
// designated constraints aren't met.
type MoveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveValidationError) ErrorName() string { return "MoveValidationError" }

// Error satisfies the builtin error interface
func (e MoveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMove.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveValidationError{}

// Validate checks the field values on Offset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Offset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Offset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OffsetMultiError, or nil if none found.
func (m *Offset) ValidateAll() error {
	return m.validate(true)
}

func (m *Offset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OffsetValue

	if len(errors) > 0 {
		return OffsetMultiError(errors)
	}

	return nil
}

// OffsetMultiError is an error wrapping multiple validation errors returned by
// Offset.ValidateAll() if the designated constraints aren't met.
type OffsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OffsetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OffsetMultiError) AllErrors() []error { return m }

// OffsetValidationError is the validation error returned by Offset.Validate if
// the designated constraints aren't met.
type OffsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OffsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OffsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OffsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OffsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OffsetValidationError) ErrorName() string { return "OffsetValidationError" }

// Error satisfies the builtin error interface
func (e OffsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OffsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OffsetValidationError{}

// Validate checks the field values on SetClaheLevel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetClaheLevel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetClaheLevel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetClaheLevelMultiError, or
// nil if none found.
func (m *SetClaheLevel) ValidateAll() error {
	return m.validate(true)
}

func (m *SetClaheLevel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetClaheLevelMultiError(errors)
	}

	return nil
}

// SetClaheLevelMultiError is an error wrapping multiple validation errors
// returned by SetClaheLevel.ValidateAll() if the designated constraints
// aren't met.
type SetClaheLevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetClaheLevelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetClaheLevelMultiError) AllErrors() []error { return m }

// SetClaheLevelValidationError is the validation error returned by
// SetClaheLevel.Validate if the designated constraints aren't met.
type SetClaheLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetClaheLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetClaheLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetClaheLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetClaheLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetClaheLevelValidationError) ErrorName() string { return "SetClaheLevelValidationError" }

// Error satisfies the builtin error interface
func (e SetClaheLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetClaheLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetClaheLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetClaheLevelValidationError{}

// Validate checks the field values on ShiftClaheLevel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShiftClaheLevel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShiftClaheLevel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShiftClaheLevelMultiError, or nil if none found.
func (m *ShiftClaheLevel) ValidateAll() error {
	return m.validate(true)
}

func (m *ShiftClaheLevel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return ShiftClaheLevelMultiError(errors)
	}

	return nil
}

// ShiftClaheLevelMultiError is an error wrapping multiple validation errors
// returned by ShiftClaheLevel.ValidateAll() if the designated constraints
// aren't met.
type ShiftClaheLevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShiftClaheLevelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShiftClaheLevelMultiError) AllErrors() []error { return m }

// ShiftClaheLevelValidationError is the validation error returned by
// ShiftClaheLevel.Validate if the designated constraints aren't met.
type ShiftClaheLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShiftClaheLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShiftClaheLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShiftClaheLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShiftClaheLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShiftClaheLevelValidationError) ErrorName() string { return "ShiftClaheLevelValidationError" }

// Error satisfies the builtin error interface
func (e ShiftClaheLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShiftClaheLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShiftClaheLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShiftClaheLevelValidationError{}

// Validate checks the field values on Root with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Root) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Root with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RootMultiError, or nil if none found.
func (m *Root) ValidateAll() error {
	return m.validate(true)
}

func (m *Root) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Root_Focus:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFocus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Focus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Focus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFocus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Focus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Zoom:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetZoom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Zoom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Zoom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetZoom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Zoom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetIris:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetIris()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetIris",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetIris",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetIris()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetIris",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetInfraRedFilter:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetInfraRedFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetInfraRedFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetInfraRedFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetInfraRedFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetInfraRedFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Start:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Stop:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStop()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStop()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Stop",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_Photo:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhoto()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Photo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "Photo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhoto()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "Photo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetAutoIris:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetAutoIris()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetAutoIris",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetAutoIris",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetAutoIris()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetAutoIris",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_HaltAll:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHaltAll()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "HaltAll",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "HaltAll",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHaltAll()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "HaltAll",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetFxMode:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetFxMode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetFxMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetFxMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetFxMode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetFxMode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_NextFxMode:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNextFxMode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "NextFxMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "NextFxMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNextFxMode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "NextFxMode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_PrevFxMode:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrevFxMode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "PrevFxMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "PrevFxMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrevFxMode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "PrevFxMode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_GetMeteo:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGetMeteo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GetMeteo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "GetMeteo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGetMeteo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "GetMeteo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_RefreshFxMode:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRefreshFxMode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "RefreshFxMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "RefreshFxMode",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRefreshFxMode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "RefreshFxMode",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetDigitalZoomLevel:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetDigitalZoomLevel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetDigitalZoomLevel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetDigitalZoomLevel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetDigitalZoomLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetDigitalZoomLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_SetClaheLevel:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetClaheLevel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetClaheLevel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "SetClaheLevel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetClaheLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "SetClaheLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_ShiftClaheLevel:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShiftClaheLevel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShiftClaheLevel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShiftClaheLevel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShiftClaheLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "ShiftClaheLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RootMultiError(errors)
	}

	return nil
}

// RootMultiError is an error wrapping multiple validation errors returned by
// Root.ValidateAll() if the designated constraints aren't met.
type RootMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RootMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RootMultiError) AllErrors() []error { return m }

// RootValidationError is the validation error returned by Root.Validate if the
// designated constraints aren't met.
type RootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RootValidationError) ErrorName() string { return "RootValidationError" }

// Error satisfies the builtin error interface
func (e RootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RootValidationError{}

// Validate checks the field values on GetPos with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPos with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetPosMultiError, or nil if none found.
func (m *GetPos) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPosMultiError(errors)
	}

	return nil
}

// GetPosMultiError is an error wrapping multiple validation errors returned by
// GetPos.ValidateAll() if the designated constraints aren't met.
type GetPosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPosMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPosMultiError) AllErrors() []error { return m }

// GetPosValidationError is the validation error returned by GetPos.Validate if
// the designated constraints aren't met.
type GetPosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPosValidationError) ErrorName() string { return "GetPosValidationError" }

// Error satisfies the builtin error interface
func (e GetPosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPosValidationError{}

// Validate checks the field values on NextFxMode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NextFxMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextFxMode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NextFxModeMultiError, or
// nil if none found.
func (m *NextFxMode) ValidateAll() error {
	return m.validate(true)
}

func (m *NextFxMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NextFxModeMultiError(errors)
	}

	return nil
}

// NextFxModeMultiError is an error wrapping multiple validation errors
// returned by NextFxMode.ValidateAll() if the designated constraints aren't met.
type NextFxModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextFxModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextFxModeMultiError) AllErrors() []error { return m }

// NextFxModeValidationError is the validation error returned by
// NextFxMode.Validate if the designated constraints aren't met.
type NextFxModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextFxModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextFxModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextFxModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextFxModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextFxModeValidationError) ErrorName() string { return "NextFxModeValidationError" }

// Error satisfies the builtin error interface
func (e NextFxModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextFxMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextFxModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextFxModeValidationError{}

// Validate checks the field values on PrevFxMode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PrevFxMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrevFxMode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrevFxModeMultiError, or
// nil if none found.
func (m *PrevFxMode) ValidateAll() error {
	return m.validate(true)
}

func (m *PrevFxMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PrevFxModeMultiError(errors)
	}

	return nil
}

// PrevFxModeMultiError is an error wrapping multiple validation errors
// returned by PrevFxMode.ValidateAll() if the designated constraints aren't met.
type PrevFxModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrevFxModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrevFxModeMultiError) AllErrors() []error { return m }

// PrevFxModeValidationError is the validation error returned by
// PrevFxMode.Validate if the designated constraints aren't met.
type PrevFxModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrevFxModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrevFxModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrevFxModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrevFxModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrevFxModeValidationError) ErrorName() string { return "PrevFxModeValidationError" }

// Error satisfies the builtin error interface
func (e PrevFxModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrevFxMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrevFxModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrevFxModeValidationError{}

// Validate checks the field values on RefreshFxMode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshFxMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshFxMode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefreshFxModeMultiError, or
// nil if none found.
func (m *RefreshFxMode) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshFxMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefreshFxModeMultiError(errors)
	}

	return nil
}

// RefreshFxModeMultiError is an error wrapping multiple validation errors
// returned by RefreshFxMode.ValidateAll() if the designated constraints
// aren't met.
type RefreshFxModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshFxModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshFxModeMultiError) AllErrors() []error { return m }

// RefreshFxModeValidationError is the validation error returned by
// RefreshFxMode.Validate if the designated constraints aren't met.
type RefreshFxModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshFxModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshFxModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshFxModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshFxModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshFxModeValidationError) ErrorName() string { return "RefreshFxModeValidationError" }

// Error satisfies the builtin error interface
func (e RefreshFxModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshFxMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshFxModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshFxModeValidationError{}

// Validate checks the field values on HaltAll with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HaltAll) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HaltAll with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HaltAllMultiError, or nil if none found.
func (m *HaltAll) ValidateAll() error {
	return m.validate(true)
}

func (m *HaltAll) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HaltAllMultiError(errors)
	}

	return nil
}

// HaltAllMultiError is an error wrapping multiple validation errors returned
// by HaltAll.ValidateAll() if the designated constraints aren't met.
type HaltAllMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HaltAllMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HaltAllMultiError) AllErrors() []error { return m }

// HaltAllValidationError is the validation error returned by HaltAll.Validate
// if the designated constraints aren't met.
type HaltAllValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HaltAllValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HaltAllValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HaltAllValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HaltAllValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HaltAllValidationError) ErrorName() string { return "HaltAllValidationError" }

// Error satisfies the builtin error interface
func (e HaltAllValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHaltAll.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HaltAllValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HaltAllValidationError{}

// Validate checks the field values on SetFxMode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetFxMode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFxMode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetFxModeMultiError, or nil
// if none found.
func (m *SetFxMode) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFxMode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	if len(errors) > 0 {
		return SetFxModeMultiError(errors)
	}

	return nil
}

// SetFxModeMultiError is an error wrapping multiple validation errors returned
// by SetFxMode.ValidateAll() if the designated constraints aren't met.
type SetFxModeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFxModeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFxModeMultiError) AllErrors() []error { return m }

// SetFxModeValidationError is the validation error returned by
// SetFxMode.Validate if the designated constraints aren't met.
type SetFxModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFxModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFxModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFxModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFxModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFxModeValidationError) ErrorName() string { return "SetFxModeValidationError" }

// Error satisfies the builtin error interface
func (e SetFxModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFxMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFxModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFxModeValidationError{}

// Validate checks the field values on SetDigitalZoomLevel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDigitalZoomLevel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDigitalZoomLevel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDigitalZoomLevelMultiError, or nil if none found.
func (m *SetDigitalZoomLevel) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDigitalZoomLevel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetDigitalZoomLevelMultiError(errors)
	}

	return nil
}

// SetDigitalZoomLevelMultiError is an error wrapping multiple validation
// errors returned by SetDigitalZoomLevel.ValidateAll() if the designated
// constraints aren't met.
type SetDigitalZoomLevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDigitalZoomLevelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDigitalZoomLevelMultiError) AllErrors() []error { return m }

// SetDigitalZoomLevelValidationError is the validation error returned by
// SetDigitalZoomLevel.Validate if the designated constraints aren't met.
type SetDigitalZoomLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDigitalZoomLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDigitalZoomLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDigitalZoomLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDigitalZoomLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDigitalZoomLevelValidationError) ErrorName() string {
	return "SetDigitalZoomLevelValidationError"
}

// Error satisfies the builtin error interface
func (e SetDigitalZoomLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDigitalZoomLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDigitalZoomLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDigitalZoomLevelValidationError{}

// Validate checks the field values on Focus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Focus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Focus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FocusMultiError, or nil if none found.
func (m *Focus) ValidateAll() error {
	return m.validate(true)
}

func (m *Focus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Focus_SetValue:
		if v == nil {
			err := FocusValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "SetValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "SetValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FocusValidationError{
					field:  "SetValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Focus_Move:
		if v == nil {
			err := FocusValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMove()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "Move",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "Move",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMove()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FocusValidationError{
					field:  "Move",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Focus_Halt:
		if v == nil {
			err := FocusValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHalt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "Halt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "Halt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHalt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FocusValidationError{
					field:  "Halt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Focus_Offset:
		if v == nil {
			err := FocusValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOffset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "Offset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "Offset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOffset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FocusValidationError{
					field:  "Offset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Focus_ResetFocus:
		if v == nil {
			err := FocusValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResetFocus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "ResetFocus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "ResetFocus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResetFocus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FocusValidationError{
					field:  "ResetFocus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Focus_SaveToTableFocus:
		if v == nil {
			err := FocusValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSaveToTableFocus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "SaveToTableFocus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FocusValidationError{
						field:  "SaveToTableFocus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSaveToTableFocus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FocusValidationError{
					field:  "SaveToTableFocus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FocusMultiError(errors)
	}

	return nil
}

// FocusMultiError is an error wrapping multiple validation errors returned by
// Focus.ValidateAll() if the designated constraints aren't met.
type FocusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FocusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FocusMultiError) AllErrors() []error { return m }

// FocusValidationError is the validation error returned by Focus.Validate if
// the designated constraints aren't met.
type FocusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FocusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FocusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FocusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FocusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FocusValidationError) ErrorName() string { return "FocusValidationError" }

// Error satisfies the builtin error interface
func (e FocusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFocus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FocusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FocusValidationError{}

// Validate checks the field values on Zoom with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Zoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Zoom with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ZoomMultiError, or nil if none found.
func (m *Zoom) ValidateAll() error {
	return m.validate(true)
}

func (m *Zoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Zoom_SetValue:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "SetValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "SetValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "SetValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Zoom_Move:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMove()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "Move",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "Move",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMove()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "Move",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Zoom_Halt:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHalt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "Halt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "Halt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHalt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "Halt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Zoom_SetZoomTableValue:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetZoomTableValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "SetZoomTableValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "SetZoomTableValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetZoomTableValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "SetZoomTableValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Zoom_NextZoomTablePos:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNextZoomTablePos()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "NextZoomTablePos",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "NextZoomTablePos",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNextZoomTablePos()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "NextZoomTablePos",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Zoom_PrevZoomTablePos:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrevZoomTablePos()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "PrevZoomTablePos",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "PrevZoomTablePos",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrevZoomTablePos()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "PrevZoomTablePos",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Zoom_Offset:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOffset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "Offset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "Offset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOffset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "Offset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Zoom_ResetZoom:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResetZoom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "ResetZoom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "ResetZoom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResetZoom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "ResetZoom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Zoom_SaveToTable:
		if v == nil {
			err := ZoomValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSaveToTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "SaveToTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ZoomValidationError{
						field:  "SaveToTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSaveToTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ZoomValidationError{
					field:  "SaveToTable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ZoomMultiError(errors)
	}

	return nil
}

// ZoomMultiError is an error wrapping multiple validation errors returned by
// Zoom.ValidateAll() if the designated constraints aren't met.
type ZoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ZoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ZoomMultiError) AllErrors() []error { return m }

// ZoomValidationError is the validation error returned by Zoom.Validate if the
// designated constraints aren't met.
type ZoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ZoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ZoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ZoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ZoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ZoomValidationError) ErrorName() string { return "ZoomValidationError" }

// Error satisfies the builtin error interface
func (e ZoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sZoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ZoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ZoomValidationError{}

// Validate checks the field values on NextZoomTablePos with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextZoomTablePos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextZoomTablePos with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextZoomTablePosMultiError, or nil if none found.
func (m *NextZoomTablePos) ValidateAll() error {
	return m.validate(true)
}

func (m *NextZoomTablePos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NextZoomTablePosMultiError(errors)
	}

	return nil
}

// NextZoomTablePosMultiError is an error wrapping multiple validation errors
// returned by NextZoomTablePos.ValidateAll() if the designated constraints
// aren't met.
type NextZoomTablePosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextZoomTablePosMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextZoomTablePosMultiError) AllErrors() []error { return m }

// NextZoomTablePosValidationError is the validation error returned by
// NextZoomTablePos.Validate if the designated constraints aren't met.
type NextZoomTablePosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextZoomTablePosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextZoomTablePosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextZoomTablePosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextZoomTablePosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextZoomTablePosValidationError) ErrorName() string { return "NextZoomTablePosValidationError" }

// Error satisfies the builtin error interface
func (e NextZoomTablePosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextZoomTablePos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextZoomTablePosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextZoomTablePosValidationError{}

// Validate checks the field values on PrevZoomTablePos with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PrevZoomTablePos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrevZoomTablePos with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrevZoomTablePosMultiError, or nil if none found.
func (m *PrevZoomTablePos) ValidateAll() error {
	return m.validate(true)
}

func (m *PrevZoomTablePos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PrevZoomTablePosMultiError(errors)
	}

	return nil
}

// PrevZoomTablePosMultiError is an error wrapping multiple validation errors
// returned by PrevZoomTablePos.ValidateAll() if the designated constraints
// aren't met.
type PrevZoomTablePosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrevZoomTablePosMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrevZoomTablePosMultiError) AllErrors() []error { return m }

// PrevZoomTablePosValidationError is the validation error returned by
// PrevZoomTablePos.Validate if the designated constraints aren't met.
type PrevZoomTablePosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrevZoomTablePosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrevZoomTablePosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrevZoomTablePosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrevZoomTablePosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrevZoomTablePosValidationError) ErrorName() string { return "PrevZoomTablePosValidationError" }

// Error satisfies the builtin error interface
func (e PrevZoomTablePosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrevZoomTablePos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrevZoomTablePosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrevZoomTablePosValidationError{}

// Validate checks the field values on SetIris with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetIris) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIris with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetIrisMultiError, or nil if none found.
func (m *SetIris) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIris) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetIrisMultiError(errors)
	}

	return nil
}

// SetIrisMultiError is an error wrapping multiple validation errors returned
// by SetIris.ValidateAll() if the designated constraints aren't met.
type SetIrisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIrisMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIrisMultiError) AllErrors() []error { return m }

// SetIrisValidationError is the validation error returned by SetIris.Validate
// if the designated constraints aren't met.
type SetIrisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIrisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIrisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIrisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIrisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIrisValidationError) ErrorName() string { return "SetIrisValidationError" }

// Error satisfies the builtin error interface
func (e SetIrisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIris.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIrisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIrisValidationError{}

// Validate checks the field values on SetInfraRedFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetInfraRedFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetInfraRedFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetInfraRedFilterMultiError, or nil if none found.
func (m *SetInfraRedFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *SetInfraRedFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetInfraRedFilterMultiError(errors)
	}

	return nil
}

// SetInfraRedFilterMultiError is an error wrapping multiple validation errors
// returned by SetInfraRedFilter.ValidateAll() if the designated constraints
// aren't met.
type SetInfraRedFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetInfraRedFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetInfraRedFilterMultiError) AllErrors() []error { return m }

// SetInfraRedFilterValidationError is the validation error returned by
// SetInfraRedFilter.Validate if the designated constraints aren't met.
type SetInfraRedFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetInfraRedFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetInfraRedFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetInfraRedFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetInfraRedFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetInfraRedFilterValidationError) ErrorName() string {
	return "SetInfraRedFilterValidationError"
}

// Error satisfies the builtin error interface
func (e SetInfraRedFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetInfraRedFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetInfraRedFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetInfraRedFilterValidationError{}

// Validate checks the field values on SetAutoIris with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetAutoIris) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAutoIris with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetAutoIrisMultiError, or
// nil if none found.
func (m *SetAutoIris) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAutoIris) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetAutoIrisMultiError(errors)
	}

	return nil
}

// SetAutoIrisMultiError is an error wrapping multiple validation errors
// returned by SetAutoIris.ValidateAll() if the designated constraints aren't met.
type SetAutoIrisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAutoIrisMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAutoIrisMultiError) AllErrors() []error { return m }

// SetAutoIrisValidationError is the validation error returned by
// SetAutoIris.Validate if the designated constraints aren't met.
type SetAutoIrisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAutoIrisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAutoIrisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAutoIrisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAutoIrisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAutoIrisValidationError) ErrorName() string { return "SetAutoIrisValidationError" }

// Error satisfies the builtin error interface
func (e SetAutoIrisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAutoIris.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAutoIrisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAutoIrisValidationError{}

// Validate checks the field values on SetZoomTableValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetZoomTableValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetZoomTableValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetZoomTableValueMultiError, or nil if none found.
func (m *SetZoomTableValue) ValidateAll() error {
	return m.validate(true)
}

func (m *SetZoomTableValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return SetZoomTableValueMultiError(errors)
	}

	return nil
}

// SetZoomTableValueMultiError is an error wrapping multiple validation errors
// returned by SetZoomTableValue.ValidateAll() if the designated constraints
// aren't met.
type SetZoomTableValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetZoomTableValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetZoomTableValueMultiError) AllErrors() []error { return m }

// SetZoomTableValueValidationError is the validation error returned by
// SetZoomTableValue.Validate if the designated constraints aren't met.
type SetZoomTableValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetZoomTableValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetZoomTableValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetZoomTableValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetZoomTableValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetZoomTableValueValidationError) ErrorName() string {
	return "SetZoomTableValueValidationError"
}

// Error satisfies the builtin error interface
func (e SetZoomTableValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetZoomTableValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetZoomTableValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetZoomTableValueValidationError{}

// Validate checks the field values on Stop with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Stop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stop with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StopMultiError, or nil if none found.
func (m *Stop) ValidateAll() error {
	return m.validate(true)
}

func (m *Stop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopMultiError(errors)
	}

	return nil
}

// StopMultiError is an error wrapping multiple validation errors returned by
// Stop.ValidateAll() if the designated constraints aren't met.
type StopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopMultiError) AllErrors() []error { return m }

// StopValidationError is the validation error returned by Stop.Validate if the
// designated constraints aren't met.
type StopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopValidationError) ErrorName() string { return "StopValidationError" }

// Error satisfies the builtin error interface
func (e StopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopValidationError{}

// Validate checks the field values on Start with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Start) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Start with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StartMultiError, or nil if none found.
func (m *Start) ValidateAll() error {
	return m.validate(true)
}

func (m *Start) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartMultiError(errors)
	}

	return nil
}

// StartMultiError is an error wrapping multiple validation errors returned by
// Start.ValidateAll() if the designated constraints aren't met.
type StartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMultiError) AllErrors() []error { return m }

// StartValidationError is the validation error returned by Start.Validate if
// the designated constraints aren't met.
type StartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartValidationError) ErrorName() string { return "StartValidationError" }

// Error satisfies the builtin error interface
func (e StartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartValidationError{}

// Validate checks the field values on Photo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Photo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Photo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PhotoMultiError, or nil if none found.
func (m *Photo) ValidateAll() error {
	return m.validate(true)
}

func (m *Photo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PhotoMultiError(errors)
	}

	return nil
}

// PhotoMultiError is an error wrapping multiple validation errors returned by
// Photo.ValidateAll() if the designated constraints aren't met.
type PhotoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhotoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhotoMultiError) AllErrors() []error { return m }

// PhotoValidationError is the validation error returned by Photo.Validate if
// the designated constraints aren't met.
type PhotoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhotoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhotoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhotoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhotoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhotoValidationError) ErrorName() string { return "PhotoValidationError" }

// Error satisfies the builtin error interface
func (e PhotoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhotoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhotoValidationError{}

// Validate checks the field values on Halt with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Halt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Halt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HaltMultiError, or nil if none found.
func (m *Halt) ValidateAll() error {
	return m.validate(true)
}

func (m *Halt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HaltMultiError(errors)
	}

	return nil
}

// HaltMultiError is an error wrapping multiple validation errors returned by
// Halt.ValidateAll() if the designated constraints aren't met.
type HaltMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HaltMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HaltMultiError) AllErrors() []error { return m }

// HaltValidationError is the validation error returned by Halt.Validate if the
// designated constraints aren't met.
type HaltValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HaltValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HaltValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HaltValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HaltValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HaltValidationError) ErrorName() string { return "HaltValidationError" }

// Error satisfies the builtin error interface
func (e HaltValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHalt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HaltValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HaltValidationError{}

// Validate checks the field values on GetMeteo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeteo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeteo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeteoMultiError, or nil
// if none found.
func (m *GetMeteo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeteo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMeteoMultiError(errors)
	}

	return nil
}

// GetMeteoMultiError is an error wrapping multiple validation errors returned
// by GetMeteo.ValidateAll() if the designated constraints aren't met.
type GetMeteoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeteoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeteoMultiError) AllErrors() []error { return m }

// GetMeteoValidationError is the validation error returned by
// GetMeteo.Validate if the designated constraints aren't met.
type GetMeteoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeteoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeteoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeteoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeteoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeteoValidationError) ErrorName() string { return "GetMeteoValidationError" }

// Error satisfies the builtin error interface
func (e GetMeteoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeteo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeteoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeteoValidationError{}

// Validate checks the field values on ResetZoom with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetZoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetZoom with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetZoomMultiError, or nil
// if none found.
func (m *ResetZoom) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetZoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetZoomMultiError(errors)
	}

	return nil
}

// ResetZoomMultiError is an error wrapping multiple validation errors returned
// by ResetZoom.ValidateAll() if the designated constraints aren't met.
type ResetZoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetZoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetZoomMultiError) AllErrors() []error { return m }

// ResetZoomValidationError is the validation error returned by
// ResetZoom.Validate if the designated constraints aren't met.
type ResetZoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetZoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetZoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetZoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetZoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetZoomValidationError) ErrorName() string { return "ResetZoomValidationError" }

// Error satisfies the builtin error interface
func (e ResetZoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetZoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetZoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetZoomValidationError{}

// Validate checks the field values on ResetFocus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetFocus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetFocus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetFocusMultiError, or
// nil if none found.
func (m *ResetFocus) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetFocus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetFocusMultiError(errors)
	}

	return nil
}

// ResetFocusMultiError is an error wrapping multiple validation errors
// returned by ResetFocus.ValidateAll() if the designated constraints aren't met.
type ResetFocusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetFocusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetFocusMultiError) AllErrors() []error { return m }

// ResetFocusValidationError is the validation error returned by
// ResetFocus.Validate if the designated constraints aren't met.
type ResetFocusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetFocusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetFocusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetFocusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetFocusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetFocusValidationError) ErrorName() string { return "ResetFocusValidationError" }

// Error satisfies the builtin error interface
func (e ResetFocusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetFocus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetFocusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetFocusValidationError{}

// Validate checks the field values on SaveToTable with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveToTable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveToTable with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveToTableMultiError, or
// nil if none found.
func (m *SaveToTable) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveToTable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SaveToTableMultiError(errors)
	}

	return nil
}

// SaveToTableMultiError is an error wrapping multiple validation errors
// returned by SaveToTable.ValidateAll() if the designated constraints aren't met.
type SaveToTableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveToTableMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveToTableMultiError) AllErrors() []error { return m }

// SaveToTableValidationError is the validation error returned by
// SaveToTable.Validate if the designated constraints aren't met.
type SaveToTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveToTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveToTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveToTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveToTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveToTableValidationError) ErrorName() string { return "SaveToTableValidationError" }

// Error satisfies the builtin error interface
func (e SaveToTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveToTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveToTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveToTableValidationError{}

// Validate checks the field values on SaveToTableFocus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaveToTableFocus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveToTableFocus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveToTableFocusMultiError, or nil if none found.
func (m *SaveToTableFocus) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveToTableFocus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SaveToTableFocusMultiError(errors)
	}

	return nil
}

// SaveToTableFocusMultiError is an error wrapping multiple validation errors
// returned by SaveToTableFocus.ValidateAll() if the designated constraints
// aren't met.
type SaveToTableFocusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveToTableFocusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveToTableFocusMultiError) AllErrors() []error { return m }

// SaveToTableFocusValidationError is the validation error returned by
// SaveToTableFocus.Validate if the designated constraints aren't met.
type SaveToTableFocusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveToTableFocusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveToTableFocusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveToTableFocusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveToTableFocusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveToTableFocusValidationError) ErrorName() string { return "SaveToTableFocusValidationError" }

// Error satisfies the builtin error interface
func (e SaveToTableFocusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveToTableFocus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveToTableFocusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveToTableFocusValidationError{}
