// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_osd.proto

package osd

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Root with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Root) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Root with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RootMultiError, or nil if none found.
func (m *Root) ValidateAll() error {
	return m.validate(true)
}

func (m *Root) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Root_ShowDefaultScreen:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShowDefaultScreen()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShowDefaultScreen",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShowDefaultScreen",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShowDefaultScreen()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "ShowDefaultScreen",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_ShowLrfMeasureScreen:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShowLrfMeasureScreen()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShowLrfMeasureScreen",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShowLrfMeasureScreen",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShowLrfMeasureScreen()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "ShowLrfMeasureScreen",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_ShowLrfResultScreen:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShowLrfResultScreen()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShowLrfResultScreen",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShowLrfResultScreen",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShowLrfResultScreen()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "ShowLrfResultScreen",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_ShowLrfResultSimplifiedScreen:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShowLrfResultSimplifiedScreen()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShowLrfResultSimplifiedScreen",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "ShowLrfResultSimplifiedScreen",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShowLrfResultSimplifiedScreen()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "ShowLrfResultSimplifiedScreen",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_EnableHeatOsd:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnableHeatOsd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "EnableHeatOsd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "EnableHeatOsd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnableHeatOsd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "EnableHeatOsd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_DisableHeatOsd:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDisableHeatOsd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DisableHeatOsd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DisableHeatOsd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDisableHeatOsd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "DisableHeatOsd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_EnableDayOsd:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnableDayOsd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "EnableDayOsd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "EnableDayOsd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnableDayOsd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "EnableDayOsd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Root_DisableDayOsd:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDisableDayOsd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DisableDayOsd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "DisableDayOsd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDisableDayOsd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "DisableDayOsd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RootMultiError(errors)
	}

	return nil
}

// RootMultiError is an error wrapping multiple validation errors returned by
// Root.ValidateAll() if the designated constraints aren't met.
type RootMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RootMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RootMultiError) AllErrors() []error { return m }

// RootValidationError is the validation error returned by Root.Validate if the
// designated constraints aren't met.
type RootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RootValidationError) ErrorName() string { return "RootValidationError" }

// Error satisfies the builtin error interface
func (e RootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RootValidationError{}

// Validate checks the field values on ShowDefaultScreen with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShowDefaultScreen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowDefaultScreen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowDefaultScreenMultiError, or nil if none found.
func (m *ShowDefaultScreen) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowDefaultScreen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShowDefaultScreenMultiError(errors)
	}

	return nil
}

// ShowDefaultScreenMultiError is an error wrapping multiple validation errors
// returned by ShowDefaultScreen.ValidateAll() if the designated constraints
// aren't met.
type ShowDefaultScreenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowDefaultScreenMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowDefaultScreenMultiError) AllErrors() []error { return m }

// ShowDefaultScreenValidationError is the validation error returned by
// ShowDefaultScreen.Validate if the designated constraints aren't met.
type ShowDefaultScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowDefaultScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowDefaultScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowDefaultScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowDefaultScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowDefaultScreenValidationError) ErrorName() string {
	return "ShowDefaultScreenValidationError"
}

// Error satisfies the builtin error interface
func (e ShowDefaultScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowDefaultScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowDefaultScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowDefaultScreenValidationError{}

// Validate checks the field values on ShowLRFMeasureScreen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShowLRFMeasureScreen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowLRFMeasureScreen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowLRFMeasureScreenMultiError, or nil if none found.
func (m *ShowLRFMeasureScreen) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowLRFMeasureScreen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShowLRFMeasureScreenMultiError(errors)
	}

	return nil
}

// ShowLRFMeasureScreenMultiError is an error wrapping multiple validation
// errors returned by ShowLRFMeasureScreen.ValidateAll() if the designated
// constraints aren't met.
type ShowLRFMeasureScreenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowLRFMeasureScreenMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowLRFMeasureScreenMultiError) AllErrors() []error { return m }

// ShowLRFMeasureScreenValidationError is the validation error returned by
// ShowLRFMeasureScreen.Validate if the designated constraints aren't met.
type ShowLRFMeasureScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowLRFMeasureScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowLRFMeasureScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowLRFMeasureScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowLRFMeasureScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowLRFMeasureScreenValidationError) ErrorName() string {
	return "ShowLRFMeasureScreenValidationError"
}

// Error satisfies the builtin error interface
func (e ShowLRFMeasureScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowLRFMeasureScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowLRFMeasureScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowLRFMeasureScreenValidationError{}

// Validate checks the field values on ShowLRFResultScreen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShowLRFResultScreen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowLRFResultScreen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowLRFResultScreenMultiError, or nil if none found.
func (m *ShowLRFResultScreen) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowLRFResultScreen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShowLRFResultScreenMultiError(errors)
	}

	return nil
}

// ShowLRFResultScreenMultiError is an error wrapping multiple validation
// errors returned by ShowLRFResultScreen.ValidateAll() if the designated
// constraints aren't met.
type ShowLRFResultScreenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowLRFResultScreenMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowLRFResultScreenMultiError) AllErrors() []error { return m }

// ShowLRFResultScreenValidationError is the validation error returned by
// ShowLRFResultScreen.Validate if the designated constraints aren't met.
type ShowLRFResultScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowLRFResultScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowLRFResultScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowLRFResultScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowLRFResultScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowLRFResultScreenValidationError) ErrorName() string {
	return "ShowLRFResultScreenValidationError"
}

// Error satisfies the builtin error interface
func (e ShowLRFResultScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowLRFResultScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowLRFResultScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowLRFResultScreenValidationError{}

// Validate checks the field values on ShowLRFResultSimplifiedScreen with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShowLRFResultSimplifiedScreen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowLRFResultSimplifiedScreen with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ShowLRFResultSimplifiedScreenMultiError, or nil if none found.
func (m *ShowLRFResultSimplifiedScreen) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowLRFResultSimplifiedScreen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShowLRFResultSimplifiedScreenMultiError(errors)
	}

	return nil
}

// ShowLRFResultSimplifiedScreenMultiError is an error wrapping multiple
// validation errors returned by ShowLRFResultSimplifiedScreen.ValidateAll()
// if the designated constraints aren't met.
type ShowLRFResultSimplifiedScreenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowLRFResultSimplifiedScreenMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowLRFResultSimplifiedScreenMultiError) AllErrors() []error { return m }

// ShowLRFResultSimplifiedScreenValidationError is the validation error
// returned by ShowLRFResultSimplifiedScreen.Validate if the designated
// constraints aren't met.
type ShowLRFResultSimplifiedScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowLRFResultSimplifiedScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowLRFResultSimplifiedScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowLRFResultSimplifiedScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowLRFResultSimplifiedScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowLRFResultSimplifiedScreenValidationError) ErrorName() string {
	return "ShowLRFResultSimplifiedScreenValidationError"
}

// Error satisfies the builtin error interface
func (e ShowLRFResultSimplifiedScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowLRFResultSimplifiedScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowLRFResultSimplifiedScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowLRFResultSimplifiedScreenValidationError{}

// Validate checks the field values on EnableHeatOSD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnableHeatOSD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableHeatOSD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnableHeatOSDMultiError, or
// nil if none found.
func (m *EnableHeatOSD) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableHeatOSD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableHeatOSDMultiError(errors)
	}

	return nil
}

// EnableHeatOSDMultiError is an error wrapping multiple validation errors
// returned by EnableHeatOSD.ValidateAll() if the designated constraints
// aren't met.
type EnableHeatOSDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableHeatOSDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableHeatOSDMultiError) AllErrors() []error { return m }

// EnableHeatOSDValidationError is the validation error returned by
// EnableHeatOSD.Validate if the designated constraints aren't met.
type EnableHeatOSDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableHeatOSDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableHeatOSDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableHeatOSDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableHeatOSDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableHeatOSDValidationError) ErrorName() string { return "EnableHeatOSDValidationError" }

// Error satisfies the builtin error interface
func (e EnableHeatOSDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableHeatOSD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableHeatOSDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableHeatOSDValidationError{}

// Validate checks the field values on DisableHeatOSD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisableHeatOSD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableHeatOSD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisableHeatOSDMultiError,
// or nil if none found.
func (m *DisableHeatOSD) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableHeatOSD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableHeatOSDMultiError(errors)
	}

	return nil
}

// DisableHeatOSDMultiError is an error wrapping multiple validation errors
// returned by DisableHeatOSD.ValidateAll() if the designated constraints
// aren't met.
type DisableHeatOSDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableHeatOSDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableHeatOSDMultiError) AllErrors() []error { return m }

// DisableHeatOSDValidationError is the validation error returned by
// DisableHeatOSD.Validate if the designated constraints aren't met.
type DisableHeatOSDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableHeatOSDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableHeatOSDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableHeatOSDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableHeatOSDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableHeatOSDValidationError) ErrorName() string { return "DisableHeatOSDValidationError" }

// Error satisfies the builtin error interface
func (e DisableHeatOSDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableHeatOSD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableHeatOSDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableHeatOSDValidationError{}

// Validate checks the field values on EnableDayOSD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnableDayOSD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableDayOSD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnableDayOSDMultiError, or
// nil if none found.
func (m *EnableDayOSD) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableDayOSD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableDayOSDMultiError(errors)
	}

	return nil
}

// EnableDayOSDMultiError is an error wrapping multiple validation errors
// returned by EnableDayOSD.ValidateAll() if the designated constraints aren't met.
type EnableDayOSDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableDayOSDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableDayOSDMultiError) AllErrors() []error { return m }

// EnableDayOSDValidationError is the validation error returned by
// EnableDayOSD.Validate if the designated constraints aren't met.
type EnableDayOSDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableDayOSDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableDayOSDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableDayOSDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableDayOSDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableDayOSDValidationError) ErrorName() string { return "EnableDayOSDValidationError" }

// Error satisfies the builtin error interface
func (e EnableDayOSDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableDayOSD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableDayOSDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableDayOSDValidationError{}

// Validate checks the field values on DisableDayOSD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisableDayOSD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableDayOSD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisableDayOSDMultiError, or
// nil if none found.
func (m *DisableDayOSD) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableDayOSD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableDayOSDMultiError(errors)
	}

	return nil
}

// DisableDayOSDMultiError is an error wrapping multiple validation errors
// returned by DisableDayOSD.ValidateAll() if the designated constraints
// aren't met.
type DisableDayOSDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableDayOSDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableDayOSDMultiError) AllErrors() []error { return m }

// DisableDayOSDValidationError is the validation error returned by
// DisableDayOSD.Validate if the designated constraints aren't met.
type DisableDayOSDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableDayOSDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableDayOSDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableDayOSDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableDayOSDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableDayOSDValidationError) ErrorName() string { return "DisableDayOSDValidationError" }

// Error satisfies the builtin error interface
func (e DisableDayOSDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableDayOSD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableDayOSDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableDayOSDValidationError{}
