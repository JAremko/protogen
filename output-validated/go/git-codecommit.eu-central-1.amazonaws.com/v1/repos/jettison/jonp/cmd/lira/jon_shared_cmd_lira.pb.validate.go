// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_lira.proto

package lira

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Root with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Root) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Root with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RootMultiError, or nil if none found.
func (m *Root) ValidateAll() error {
	return m.validate(true)
}

func (m *Root) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Cmd.(type) {
	case *Root_RefineTarget:
		if v == nil {
			err := RootValidationError{
				field:  "Cmd",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRefineTarget()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "RefineTarget",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RootValidationError{
						field:  "RefineTarget",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRefineTarget()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RootValidationError{
					field:  "RefineTarget",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RootMultiError(errors)
	}

	return nil
}

// RootMultiError is an error wrapping multiple validation errors returned by
// Root.ValidateAll() if the designated constraints aren't met.
type RootMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RootMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RootMultiError) AllErrors() []error { return m }

// RootValidationError is the validation error returned by Root.Validate if the
// designated constraints aren't met.
type RootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RootValidationError) ErrorName() string { return "RootValidationError" }

// Error satisfies the builtin error interface
func (e RootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RootValidationError{}

// Validate checks the field values on RefineTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefineTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefineTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefineTargetMultiError, or
// nil if none found.
func (m *RefineTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *RefineTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefineTargetValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefineTargetValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefineTargetValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefineTargetMultiError(errors)
	}

	return nil
}

// RefineTargetMultiError is an error wrapping multiple validation errors
// returned by RefineTarget.ValidateAll() if the designated constraints aren't met.
type RefineTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefineTargetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefineTargetMultiError) AllErrors() []error { return m }

// RefineTargetValidationError is the validation error returned by
// RefineTarget.Validate if the designated constraints aren't met.
type RefineTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefineTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefineTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefineTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefineTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefineTargetValidationError) ErrorName() string { return "RefineTargetValidationError" }

// Error satisfies the builtin error interface
func (e RefineTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefineTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefineTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefineTargetValidationError{}

// Validate checks the field values on JonGuiDataLiraTarget with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JonGuiDataLiraTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JonGuiDataLiraTarget with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JonGuiDataLiraTargetMultiError, or nil if none found.
func (m *JonGuiDataLiraTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *JonGuiDataLiraTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for TargetLongitude

	// no validation rules for TargetLatitude

	// no validation rules for TargetAltitude

	// no validation rules for TargetAzimuth

	// no validation rules for TargetElevation

	// no validation rules for Distance

	// no validation rules for UuidPart1

	// no validation rules for UuidPart2

	// no validation rules for UuidPart3

	// no validation rules for UuidPart4

	if len(errors) > 0 {
		return JonGuiDataLiraTargetMultiError(errors)
	}

	return nil
}

// JonGuiDataLiraTargetMultiError is an error wrapping multiple validation
// errors returned by JonGuiDataLiraTarget.ValidateAll() if the designated
// constraints aren't met.
type JonGuiDataLiraTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JonGuiDataLiraTargetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JonGuiDataLiraTargetMultiError) AllErrors() []error { return m }

// JonGuiDataLiraTargetValidationError is the validation error returned by
// JonGuiDataLiraTarget.Validate if the designated constraints aren't met.
type JonGuiDataLiraTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JonGuiDataLiraTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JonGuiDataLiraTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JonGuiDataLiraTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JonGuiDataLiraTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JonGuiDataLiraTargetValidationError) ErrorName() string {
	return "JonGuiDataLiraTargetValidationError"
}

// Error satisfies the builtin error interface
func (e JonGuiDataLiraTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJonGuiDataLiraTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JonGuiDataLiraTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JonGuiDataLiraTargetValidationError{}
