// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_data_lrf.proto

package lrf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on JonGuiDataLrf with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JonGuiDataLrf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JonGuiDataLrf with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JonGuiDataLrfMultiError, or
// nil if none found.
func (m *JonGuiDataLrf) ValidateAll() error {
	return m.validate(true)
}

func (m *JonGuiDataLrf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsScanning

	// no validation rules for IsMeasuring

	// no validation rules for MeasureId

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JonGuiDataLrfValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JonGuiDataLrfValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JonGuiDataLrfValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PointerMode

	// no validation rules for FogModeEnabled

	// no validation rules for IsRefining

	if len(errors) > 0 {
		return JonGuiDataLrfMultiError(errors)
	}

	return nil
}

// JonGuiDataLrfMultiError is an error wrapping multiple validation errors
// returned by JonGuiDataLrf.ValidateAll() if the designated constraints
// aren't met.
type JonGuiDataLrfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JonGuiDataLrfMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JonGuiDataLrfMultiError) AllErrors() []error { return m }

// JonGuiDataLrfValidationError is the validation error returned by
// JonGuiDataLrf.Validate if the designated constraints aren't met.
type JonGuiDataLrfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JonGuiDataLrfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JonGuiDataLrfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JonGuiDataLrfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JonGuiDataLrfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JonGuiDataLrfValidationError) ErrorName() string { return "JonGuiDataLrfValidationError" }

// Error satisfies the builtin error interface
func (e JonGuiDataLrfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJonGuiDataLrf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JonGuiDataLrfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JonGuiDataLrfValidationError{}

// Validate checks the field values on JonGuiDataTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JonGuiDataTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JonGuiDataTarget with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JonGuiDataTargetMultiError, or nil if none found.
func (m *JonGuiDataTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *JonGuiDataTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for TargetLongitude

	// no validation rules for TargetLatitude

	// no validation rules for TargetAltitude

	// no validation rules for ObserverLongitude

	// no validation rules for ObserverLatitude

	// no validation rules for ObserverAltitude

	// no validation rules for ObserverAzimuth

	// no validation rules for ObserverElevation

	// no validation rules for ObserverBank

	// no validation rules for Distance_2D

	// no validation rules for Distance_3B

	// no validation rules for ObserverFixType

	// no validation rules for SessionId

	// no validation rules for TargetId

	if all {
		switch v := interface{}(m.GetTargetColor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JonGuiDataTargetValidationError{
					field:  "TargetColor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JonGuiDataTargetValidationError{
					field:  "TargetColor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetColor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JonGuiDataTargetValidationError{
				field:  "TargetColor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for UuidPart1

	// no validation rules for UuidPart2

	// no validation rules for UuidPart3

	// no validation rules for UuidPart4

	if len(errors) > 0 {
		return JonGuiDataTargetMultiError(errors)
	}

	return nil
}

// JonGuiDataTargetMultiError is an error wrapping multiple validation errors
// returned by JonGuiDataTarget.ValidateAll() if the designated constraints
// aren't met.
type JonGuiDataTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JonGuiDataTargetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JonGuiDataTargetMultiError) AllErrors() []error { return m }

// JonGuiDataTargetValidationError is the validation error returned by
// JonGuiDataTarget.Validate if the designated constraints aren't met.
type JonGuiDataTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JonGuiDataTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JonGuiDataTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JonGuiDataTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JonGuiDataTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JonGuiDataTargetValidationError) ErrorName() string { return "JonGuiDataTargetValidationError" }

// Error satisfies the builtin error interface
func (e JonGuiDataTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJonGuiDataTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JonGuiDataTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JonGuiDataTargetValidationError{}

// Validate checks the field values on RgbColor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RgbColor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RgbColor with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RgbColorMultiError, or nil
// if none found.
func (m *RgbColor) ValidateAll() error {
	return m.validate(true)
}

func (m *RgbColor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Red

	// no validation rules for Green

	// no validation rules for Blue

	if len(errors) > 0 {
		return RgbColorMultiError(errors)
	}

	return nil
}

// RgbColorMultiError is an error wrapping multiple validation errors returned
// by RgbColor.ValidateAll() if the designated constraints aren't met.
type RgbColorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RgbColorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RgbColorMultiError) AllErrors() []error { return m }

// RgbColorValidationError is the validation error returned by
// RgbColor.Validate if the designated constraints aren't met.
type RgbColorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RgbColorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RgbColorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RgbColorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RgbColorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RgbColorValidationError) ErrorName() string { return "RgbColorValidationError" }

// Error satisfies the builtin error interface
func (e RgbColorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRgbColor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RgbColorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RgbColorValidationError{}
