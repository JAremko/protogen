// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_data.proto

package ser;


@SuppressWarnings("all")
public class JonSharedDataValidator {
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		
		if (clazz.equals(ser.JonSharedData.JonGUIState.class)) return new JonGUIStateValidator();
		return null;
	}


/**
	 * Validates {@code JonGUIState} protobuf objects.
	 */
	public static class JonGUIStateValidator implements io.envoyproxy.pgv.ValidatorImpl<ser.JonSharedData.JonGUIState> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	
	

	public void assertValid(ser.JonSharedData.JonGUIState proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for ProtocolVersion

	
			// Validate system
			if (proto.hasSystem()) index.validatorFor(proto.getSystem()).assertValid(proto.getSystem());
	
			// Validate meteo_internal
			if (proto.hasMeteoInternal()) index.validatorFor(proto.getMeteoInternal()).assertValid(proto.getMeteoInternal());
	
			// Validate lrf
			if (proto.hasLrf()) index.validatorFor(proto.getLrf()).assertValid(proto.getLrf());
	
			// Validate time
			if (proto.hasTime()) index.validatorFor(proto.getTime()).assertValid(proto.getTime());
	
			// Validate gps
			if (proto.hasGps()) index.validatorFor(proto.getGps()).assertValid(proto.getGps());
	
			// Validate compass
			if (proto.hasCompass()) index.validatorFor(proto.getCompass()).assertValid(proto.getCompass());
	
			// Validate rotary
			if (proto.hasRotary()) index.validatorFor(proto.getRotary()).assertValid(proto.getRotary());
	
			// Validate camera_day
			if (proto.hasCameraDay()) index.validatorFor(proto.getCameraDay()).assertValid(proto.getCameraDay());
	
			// Validate camera_heat
			if (proto.hasCameraHeat()) index.validatorFor(proto.getCameraHeat()).assertValid(proto.getCameraHeat());
	
			// Validate compass_calibration
			if (proto.hasCompassCalibration()) index.validatorFor(proto.getCompassCalibration()).assertValid(proto.getCompassCalibration());
	
			// Validate rec_osd
			if (proto.hasRecOsd()) index.validatorFor(proto.getRecOsd()).assertValid(proto.getRecOsd());
	
			// Validate day_cam_glass_heater
			if (proto.hasDayCamGlassHeater()) index.validatorFor(proto.getDayCamGlassHeater()).assertValid(proto.getDayCamGlassHeater());
	
			// Validate actual_space_time
			if (proto.hasActualSpaceTime()) index.validatorFor(proto.getActualSpaceTime()).assertValid(proto.getActualSpaceTime());
	
	
	}
}
}

