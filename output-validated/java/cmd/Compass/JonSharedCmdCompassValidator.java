// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_compass.proto

package cmd.Compass;


@SuppressWarnings("all")
public class JonSharedCmdCompassValidator {
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.Root.class)) return new RootValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.Start.class)) return new StartValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.Stop.class)) return new StopValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.Next.class)) return new NextValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.CalibrateStartLong.class)) return new CalibrateStartLongValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.CalibrateStartShort.class)) return new CalibrateStartShortValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.CalibrateNext.class)) return new CalibrateNextValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.CalibrateCencel.class)) return new CalibrateCencelValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.GetMeteo.class)) return new GetMeteoValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.SetMagneticDeclination.class)) return new SetMagneticDeclinationValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.SetOffsetAngleAzimuth.class)) return new SetOffsetAngleAzimuthValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.SetOffsetAngleElevation.class)) return new SetOffsetAngleElevationValidator();
		if (clazz.equals(cmd.Compass.JonSharedCmdCompass.SetUseRotaryPosition.class)) return new SetUseRotaryPositionValidator();
		return null;
	}


/**
	 * Validates {@code Root} protobuf objects.
	 */
	public static class RootValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.Root> {
	
	
		


	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.Root proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
		
			switch (proto.getCmdCase()) {
				case START:
					
			// Validate start
			if (proto.hasStart()) index.validatorFor(proto.getStart()).assertValid(proto.getStart());
					break;
				case STOP:
					
			// Validate stop
			if (proto.hasStop()) index.validatorFor(proto.getStop()).assertValid(proto.getStop());
					break;
				case SET_MAGNETIC_DECLINATION:
					
			// Validate set_magnetic_declination
			if (proto.hasSetMagneticDeclination()) index.validatorFor(proto.getSetMagneticDeclination()).assertValid(proto.getSetMagneticDeclination());
					break;
				case SET_OFFSET_ANGLE_AZIMUTH:
					
			// Validate set_offset_angle_azimuth
			if (proto.hasSetOffsetAngleAzimuth()) index.validatorFor(proto.getSetOffsetAngleAzimuth()).assertValid(proto.getSetOffsetAngleAzimuth());
					break;
				case SET_OFFSET_ANGLE_ELEVATION:
					
			// Validate set_offset_angle_elevation
			if (proto.hasSetOffsetAngleElevation()) index.validatorFor(proto.getSetOffsetAngleElevation()).assertValid(proto.getSetOffsetAngleElevation());
					break;
				case SET_USE_ROTARY_POSITION:
					
			// Validate set_use_rotary_position
			if (proto.hasSetUseRotaryPosition()) index.validatorFor(proto.getSetUseRotaryPosition()).assertValid(proto.getSetUseRotaryPosition());
					break;
				case START_CALIBRATE_LONG:
					
			// Validate start_calibrate_long
			if (proto.hasStartCalibrateLong()) index.validatorFor(proto.getStartCalibrateLong()).assertValid(proto.getStartCalibrateLong());
					break;
				case START_CALIBRATE_SHORT:
					
			// Validate start_calibrate_short
			if (proto.hasStartCalibrateShort()) index.validatorFor(proto.getStartCalibrateShort()).assertValid(proto.getStartCalibrateShort());
					break;
				case CALIBRATE_NEXT:
					
			// Validate calibrate_next
			if (proto.hasCalibrateNext()) index.validatorFor(proto.getCalibrateNext()).assertValid(proto.getCalibrateNext());
					break;
				case CALIBRATE_CENCEL:
					
			// Validate calibrate_cencel
			if (proto.hasCalibrateCencel()) index.validatorFor(proto.getCalibrateCencel()).assertValid(proto.getCalibrateCencel());
					break;
				case GET_METEO:
					
			// Validate get_meteo
			if (proto.hasGetMeteo()) index.validatorFor(proto.getGetMeteo()).assertValid(proto.getGetMeteo());
					break;
				
			}

	}
}
/**
	 * Validates {@code Start} protobuf objects.
	 */
	public static class StartValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.Start> {
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.Start proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code Stop} protobuf objects.
	 */
	public static class StopValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.Stop> {
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.Stop proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code Next} protobuf objects.
	 */
	public static class NextValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.Next> {
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.Next proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code CalibrateStartLong} protobuf objects.
	 */
	public static class CalibrateStartLongValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.CalibrateStartLong> {
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.CalibrateStartLong proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code CalibrateStartShort} protobuf objects.
	 */
	public static class CalibrateStartShortValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.CalibrateStartShort> {
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.CalibrateStartShort proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code CalibrateNext} protobuf objects.
	 */
	public static class CalibrateNextValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.CalibrateNext> {
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.CalibrateNext proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code CalibrateCencel} protobuf objects.
	 */
	public static class CalibrateCencelValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.CalibrateCencel> {
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.CalibrateCencel proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code GetMeteo} protobuf objects.
	 */
	public static class GetMeteoValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.GetMeteo> {
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.GetMeteo proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code SetMagneticDeclination} protobuf objects.
	 */
	public static class SetMagneticDeclinationValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.SetMagneticDeclination> {
		
	
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.SetMagneticDeclination proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	
	
	}
}
/**
	 * Validates {@code SetOffsetAngleAzimuth} protobuf objects.
	 */
	public static class SetOffsetAngleAzimuthValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.SetOffsetAngleAzimuth> {
		
	
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.SetOffsetAngleAzimuth proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	
	
	}
}
/**
	 * Validates {@code SetOffsetAngleElevation} protobuf objects.
	 */
	public static class SetOffsetAngleElevationValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.SetOffsetAngleElevation> {
		
	
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.SetOffsetAngleElevation proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	
	
	}
}
/**
	 * Validates {@code SetUseRotaryPosition} protobuf objects.
	 */
	public static class SetUseRotaryPositionValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.Compass.JonSharedCmdCompass.SetUseRotaryPosition> {
		
	
	
	

	public void assertValid(cmd.Compass.JonSharedCmdCompass.SetUseRotaryPosition proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Flag

	
	
	}
}
}

