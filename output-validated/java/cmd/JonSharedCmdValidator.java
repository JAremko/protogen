// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd.proto

package cmd;


@SuppressWarnings("all")
public class JonSharedCmdValidator {
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		
		if (clazz.equals(cmd.JonSharedCmd.Root.class)) return new RootValidator();
		if (clazz.equals(cmd.JonSharedCmd.Ping.class)) return new PingValidator();
		if (clazz.equals(cmd.JonSharedCmd.Noop.class)) return new NoopValidator();
		if (clazz.equals(cmd.JonSharedCmd.Frozen.class)) return new FrozenValidator();
		return null;
	}


/**
	 * Validates {@code Root} protobuf objects.
	 */
	public static class RootValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.JonSharedCmd.Root> {
		
	
		
	
		
	
		
	
		
	
	
	
		


	

	public void assertValid(cmd.JonSharedCmd.Root proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for ProtocolVersion

	// no validation rules for SessionId

	// no validation rules for Important

	// no validation rules for FromCvSubsystem

	// no validation rules for ClientType

	
	
		
			switch (proto.getPayloadCase()) {
				case DAY_CAMERA:
					
			// Validate day_camera
			if (proto.hasDayCamera()) index.validatorFor(proto.getDayCamera()).assertValid(proto.getDayCamera());
					break;
				case HEAT_CAMERA:
					
			// Validate heat_camera
			if (proto.hasHeatCamera()) index.validatorFor(proto.getHeatCamera()).assertValid(proto.getHeatCamera());
					break;
				case GPS:
					
			// Validate gps
			if (proto.hasGps()) index.validatorFor(proto.getGps()).assertValid(proto.getGps());
					break;
				case COMPASS:
					
			// Validate compass
			if (proto.hasCompass()) index.validatorFor(proto.getCompass()).assertValid(proto.getCompass());
					break;
				case LRF:
					
			// Validate lrf
			if (proto.hasLrf()) index.validatorFor(proto.getLrf()).assertValid(proto.getLrf());
					break;
				case LRF_CALIB:
					
			// Validate lrf_calib
			if (proto.hasLrfCalib()) index.validatorFor(proto.getLrfCalib()).assertValid(proto.getLrfCalib());
					break;
				case ROTARY:
					
			// Validate rotary
			if (proto.hasRotary()) index.validatorFor(proto.getRotary()).assertValid(proto.getRotary());
					break;
				case OSD:
					
			// Validate osd
			if (proto.hasOsd()) index.validatorFor(proto.getOsd()).assertValid(proto.getOsd());
					break;
				case PING:
					
			// Validate ping
			if (proto.hasPing()) index.validatorFor(proto.getPing()).assertValid(proto.getPing());
					break;
				case NOOP:
					
			// Validate noop
			if (proto.hasNoop()) index.validatorFor(proto.getNoop()).assertValid(proto.getNoop());
					break;
				case FROZEN:
					
			// Validate frozen
			if (proto.hasFrozen()) index.validatorFor(proto.getFrozen()).assertValid(proto.getFrozen());
					break;
				case SYSTEM:
					
			// Validate system
			if (proto.hasSystem()) index.validatorFor(proto.getSystem()).assertValid(proto.getSystem());
					break;
				case CV:
					
			// Validate cv
			if (proto.hasCv()) index.validatorFor(proto.getCv()).assertValid(proto.getCv());
					break;
				case DAY_CAM_GLASS_HEATER:
					
			// Validate day_cam_glass_heater
			if (proto.hasDayCamGlassHeater()) index.validatorFor(proto.getDayCamGlassHeater()).assertValid(proto.getDayCamGlassHeater());
					break;
				case LIRA:
					
			// Validate lira
			if (proto.hasLira()) index.validatorFor(proto.getLira()).assertValid(proto.getLira());
					break;
				
			}

	}
}
/**
	 * Validates {@code Ping} protobuf objects.
	 */
	public static class PingValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.JonSharedCmd.Ping> {
	
	

	public void assertValid(cmd.JonSharedCmd.Ping proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code Noop} protobuf objects.
	 */
	public static class NoopValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.JonSharedCmd.Noop> {
	
	

	public void assertValid(cmd.JonSharedCmd.Noop proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code Frozen} protobuf objects.
	 */
	public static class FrozenValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.JonSharedCmd.Frozen> {
	
	

	public void assertValid(cmd.JonSharedCmd.Frozen proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
}

