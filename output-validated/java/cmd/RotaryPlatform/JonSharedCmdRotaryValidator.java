// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jon_shared_cmd_rotary.proto

package cmd.RotaryPlatform;


@SuppressWarnings("all")
public class JonSharedCmdRotaryValidator {
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.Root.class)) return new RootValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.Axis.class)) return new AxisValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.SetMode.class)) return new SetModeValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.SetAzimuthValue.class)) return new SetAzimuthValueValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthTo.class)) return new RotateAzimuthToValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuth.class)) return new RotateAzimuthValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevation.class)) return new RotateElevationValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.SetElevationValue.class)) return new SetElevationValueValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationTo.class)) return new RotateElevationToValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationRelative.class)) return new RotateElevationRelativeValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationRelativeSet.class)) return new RotateElevationRelativeSetValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthRelative.class)) return new RotateAzimuthRelativeValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthRelativeSet.class)) return new RotateAzimuthRelativeSetValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformAzimuth.class)) return new SetPlatformAzimuthValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformElevation.class)) return new SetPlatformElevationValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformBank.class)) return new SetPlatformBankValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.GetMeteo.class)) return new GetMeteoValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.Azimuth.class)) return new AzimuthValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.Start.class)) return new StartValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.Stop.class)) return new StopValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.Halt.class)) return new HaltValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanStart.class)) return new ScanStartValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanStop.class)) return new ScanStopValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanPause.class)) return new ScanPauseValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanUnpause.class)) return new ScanUnpauseValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.HaltAzimuth.class)) return new HaltAzimuthValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.HaltElevation.class)) return new HaltElevationValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanPrev.class)) return new ScanPrevValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanNext.class)) return new ScanNextValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanRefreshNodeList.class)) return new ScanRefreshNodeListValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanSelectNode.class)) return new ScanSelectNodeValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanDeleteNode.class)) return new ScanDeleteNodeValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanUpdateNode.class)) return new ScanUpdateNodeValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.ScanAddNode.class)) return new ScanAddNodeValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.Elevation.class)) return new ElevationValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.setUseRotaryAsCompass.class)) return new SetUseRotaryAsCompassValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateToGPS.class)) return new RotateToGPSValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.SetOriginGPS.class)) return new SetOriginGPSValidator();
		if (clazz.equals(cmd.RotaryPlatform.JonSharedCmdRotary.RotateToNDC.class)) return new RotateToNDCValidator();
		return null;
	}


/**
	 * Validates {@code Root} protobuf objects.
	 */
	public static class RootValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.Root> {
	
	
		


	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.Root proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
		
			switch (proto.getCmdCase()) {
				case START:
					
			// Validate start
			if (proto.hasStart()) index.validatorFor(proto.getStart()).assertValid(proto.getStart());
					break;
				case STOP:
					
			// Validate stop
			if (proto.hasStop()) index.validatorFor(proto.getStop()).assertValid(proto.getStop());
					break;
				case AXIS:
					
			// Validate axis
			if (proto.hasAxis()) index.validatorFor(proto.getAxis()).assertValid(proto.getAxis());
					break;
				case SET_PLATFORM_AZIMUTH:
					
			// Validate set_platform_azimuth
			if (proto.hasSetPlatformAzimuth()) index.validatorFor(proto.getSetPlatformAzimuth()).assertValid(proto.getSetPlatformAzimuth());
					break;
				case SET_PLATFORM_ELEVATION:
					
			// Validate set_platform_elevation
			if (proto.hasSetPlatformElevation()) index.validatorFor(proto.getSetPlatformElevation()).assertValid(proto.getSetPlatformElevation());
					break;
				case SET_PLATFORM_BANK:
					
			// Validate set_platform_bank
			if (proto.hasSetPlatformBank()) index.validatorFor(proto.getSetPlatformBank()).assertValid(proto.getSetPlatformBank());
					break;
				case HALT:
					
			// Validate halt
			if (proto.hasHalt()) index.validatorFor(proto.getHalt()).assertValid(proto.getHalt());
					break;
				case SET_USE_ROTARY_AS_COMPASS:
					
			// Validate set_use_rotary_as_compass
			if (proto.hasSetUseRotaryAsCompass()) index.validatorFor(proto.getSetUseRotaryAsCompass()).assertValid(proto.getSetUseRotaryAsCompass());
					break;
				case ROTATE_TO_GPS:
					
			// Validate rotate_to_gps
			if (proto.hasRotateToGps()) index.validatorFor(proto.getRotateToGps()).assertValid(proto.getRotateToGps());
					break;
				case SET_ORIGIN_GPS:
					
			// Validate set_origin_gps
			if (proto.hasSetOriginGps()) index.validatorFor(proto.getSetOriginGps()).assertValid(proto.getSetOriginGps());
					break;
				case SET_MODE:
					
			// Validate set_mode
			if (proto.hasSetMode()) index.validatorFor(proto.getSetMode()).assertValid(proto.getSetMode());
					break;
				case ROTATE_TO_NDC:
					
			// Validate rotate_to_ndc
			if (proto.hasRotateToNdc()) index.validatorFor(proto.getRotateToNdc()).assertValid(proto.getRotateToNdc());
					break;
				case SCAN_START:
					
			// Validate scan_start
			if (proto.hasScanStart()) index.validatorFor(proto.getScanStart()).assertValid(proto.getScanStart());
					break;
				case SCAN_STOP:
					
			// Validate scan_stop
			if (proto.hasScanStop()) index.validatorFor(proto.getScanStop()).assertValid(proto.getScanStop());
					break;
				case SCAN_PAUSE:
					
			// Validate scan_pause
			if (proto.hasScanPause()) index.validatorFor(proto.getScanPause()).assertValid(proto.getScanPause());
					break;
				case SCAN_UNPAUSE:
					
			// Validate scan_unpause
			if (proto.hasScanUnpause()) index.validatorFor(proto.getScanUnpause()).assertValid(proto.getScanUnpause());
					break;
				case GET_METEO:
					
			// Validate get_meteo
			if (proto.hasGetMeteo()) index.validatorFor(proto.getGetMeteo()).assertValid(proto.getGetMeteo());
					break;
				case SCAN_PREV:
					
			// Validate scan_prev
			if (proto.hasScanPrev()) index.validatorFor(proto.getScanPrev()).assertValid(proto.getScanPrev());
					break;
				case SCAN_NEXT:
					
			// Validate scan_next
			if (proto.hasScanNext()) index.validatorFor(proto.getScanNext()).assertValid(proto.getScanNext());
					break;
				case SCAN_REFRESH_NODE_LIST:
					
			// Validate scan_refresh_node_list
			if (proto.hasScanRefreshNodeList()) index.validatorFor(proto.getScanRefreshNodeList()).assertValid(proto.getScanRefreshNodeList());
					break;
				case SCAN_SELECT_NODE:
					
			// Validate scan_select_node
			if (proto.hasScanSelectNode()) index.validatorFor(proto.getScanSelectNode()).assertValid(proto.getScanSelectNode());
					break;
				case SCAN_DELETE_NODE:
					
			// Validate scan_delete_node
			if (proto.hasScanDeleteNode()) index.validatorFor(proto.getScanDeleteNode()).assertValid(proto.getScanDeleteNode());
					break;
				case SCAN_UPDATE_NODE:
					
			// Validate scan_update_node
			if (proto.hasScanUpdateNode()) index.validatorFor(proto.getScanUpdateNode()).assertValid(proto.getScanUpdateNode());
					break;
				case SCAN_ADD_NODE:
					
			// Validate scan_add_node
			if (proto.hasScanAddNode()) index.validatorFor(proto.getScanAddNode()).assertValid(proto.getScanAddNode());
					break;
				
			}

	}
}
/**
	 * Validates {@code Axis} protobuf objects.
	 */
	public static class AxisValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.Axis> {
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.Axis proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			// Validate azimuth
			if (proto.hasAzimuth()) index.validatorFor(proto.getAzimuth()).assertValid(proto.getAzimuth());
	
			// Validate elevation
			if (proto.hasElevation()) index.validatorFor(proto.getElevation()).assertValid(proto.getElevation());
	
	
	}
}
/**
	 * Validates {@code SetMode} protobuf objects.
	 */
	public static class SetModeValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.SetMode> {
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.SetMode proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Mode

	
	
	}
}
/**
	 * Validates {@code SetAzimuthValue} protobuf objects.
	 */
	public static class SetAzimuthValueValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.SetAzimuthValue> {
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.SetAzimuthValue proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	// no validation rules for Direction

	
	
	}
}
/**
	 * Validates {@code RotateAzimuthTo} protobuf objects.
	 */
	public static class RotateAzimuthToValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthTo> {
		
	
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthTo proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for TargetValue

	// no validation rules for Speed

	// no validation rules for Direction

	
	
	}
}
/**
	 * Validates {@code RotateAzimuth} protobuf objects.
	 */
	public static class RotateAzimuthValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuth> {
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuth proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Speed

	// no validation rules for Direction

	
	
	}
}
/**
	 * Validates {@code RotateElevation} protobuf objects.
	 */
	public static class RotateElevationValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevation> {
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevation proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Speed

	// no validation rules for Direction

	
	
	}
}
/**
	 * Validates {@code SetElevationValue} protobuf objects.
	 */
	public static class SetElevationValueValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.SetElevationValue> {
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.SetElevationValue proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	
	
	}
}
/**
	 * Validates {@code RotateElevationTo} protobuf objects.
	 */
	public static class RotateElevationToValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationTo> {
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationTo proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for TargetValue

	// no validation rules for Speed

	
	
	}
}
/**
	 * Validates {@code RotateElevationRelative} protobuf objects.
	 */
	public static class RotateElevationRelativeValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationRelative> {
		
	
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationRelative proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	// no validation rules for Speed

	// no validation rules for Direction

	
	
	}
}
/**
	 * Validates {@code RotateElevationRelativeSet} protobuf objects.
	 */
	public static class RotateElevationRelativeSetValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationRelativeSet> {
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateElevationRelativeSet proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	// no validation rules for Direction

	
	
	}
}
/**
	 * Validates {@code RotateAzimuthRelative} protobuf objects.
	 */
	public static class RotateAzimuthRelativeValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthRelative> {
		
	
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthRelative proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	// no validation rules for Speed

	// no validation rules for Direction

	
	
	}
}
/**
	 * Validates {@code RotateAzimuthRelativeSet} protobuf objects.
	 */
	public static class RotateAzimuthRelativeSetValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthRelativeSet> {
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateAzimuthRelativeSet proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	// no validation rules for Direction

	
	
	}
}
/**
	 * Validates {@code SetPlatformAzimuth} protobuf objects.
	 */
	public static class SetPlatformAzimuthValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformAzimuth> {
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformAzimuth proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	
	
	}
}
/**
	 * Validates {@code SetPlatformElevation} protobuf objects.
	 */
	public static class SetPlatformElevationValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformElevation> {
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformElevation proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	
	
	}
}
/**
	 * Validates {@code SetPlatformBank} protobuf objects.
	 */
	public static class SetPlatformBankValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformBank> {
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.SetPlatformBank proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Value

	
	
	}
}
/**
	 * Validates {@code GetMeteo} protobuf objects.
	 */
	public static class GetMeteoValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.GetMeteo> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.GetMeteo proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code Azimuth} protobuf objects.
	 */
	public static class AzimuthValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.Azimuth> {
	
	
		


	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.Azimuth proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
		
			switch (proto.getCmdCase()) {
				case SET_VALUE:
					
			// Validate set_value
			if (proto.hasSetValue()) index.validatorFor(proto.getSetValue()).assertValid(proto.getSetValue());
					break;
				case ROTATE_TO:
					
			// Validate rotate_to
			if (proto.hasRotateTo()) index.validatorFor(proto.getRotateTo()).assertValid(proto.getRotateTo());
					break;
				case ROTATE:
					
			// Validate rotate
			if (proto.hasRotate()) index.validatorFor(proto.getRotate()).assertValid(proto.getRotate());
					break;
				case RELATIVE:
					
			// Validate relative
			if (proto.hasRelative()) index.validatorFor(proto.getRelative()).assertValid(proto.getRelative());
					break;
				case RELATIVE_SET:
					
			// Validate relative_set
			if (proto.hasRelativeSet()) index.validatorFor(proto.getRelativeSet()).assertValid(proto.getRelativeSet());
					break;
				case HALT:
					
			// Validate halt
			if (proto.hasHalt()) index.validatorFor(proto.getHalt()).assertValid(proto.getHalt());
					break;
				
			}

	}
}
/**
	 * Validates {@code Start} protobuf objects.
	 */
	public static class StartValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.Start> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.Start proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code Stop} protobuf objects.
	 */
	public static class StopValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.Stop> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.Stop proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code Halt} protobuf objects.
	 */
	public static class HaltValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.Halt> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.Halt proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code ScanStart} protobuf objects.
	 */
	public static class ScanStartValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanStart> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanStart proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code ScanStop} protobuf objects.
	 */
	public static class ScanStopValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanStop> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanStop proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code ScanPause} protobuf objects.
	 */
	public static class ScanPauseValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanPause> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanPause proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code ScanUnpause} protobuf objects.
	 */
	public static class ScanUnpauseValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanUnpause> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanUnpause proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code HaltAzimuth} protobuf objects.
	 */
	public static class HaltAzimuthValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.HaltAzimuth> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.HaltAzimuth proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code HaltElevation} protobuf objects.
	 */
	public static class HaltElevationValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.HaltElevation> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.HaltElevation proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code ScanPrev} protobuf objects.
	 */
	public static class ScanPrevValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanPrev> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanPrev proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code ScanNext} protobuf objects.
	 */
	public static class ScanNextValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanNext> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanNext proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code ScanRefreshNodeList} protobuf objects.
	 */
	public static class ScanRefreshNodeListValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanRefreshNodeList> {
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanRefreshNodeList proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
	}
}
/**
	 * Validates {@code ScanSelectNode} protobuf objects.
	 */
	public static class ScanSelectNodeValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanSelectNode> {
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanSelectNode proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Index

	
	
	}
}
/**
	 * Validates {@code ScanDeleteNode} protobuf objects.
	 */
	public static class ScanDeleteNodeValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanDeleteNode> {
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanDeleteNode proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Index

	
	
	}
}
/**
	 * Validates {@code ScanUpdateNode} protobuf objects.
	 */
	public static class ScanUpdateNodeValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanUpdateNode> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanUpdateNode proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Index

	// no validation rules for DayZoomTableValue

	// no validation rules for HeatZoomTableValue

	// no validation rules for Azimuth

	// no validation rules for Elevation

	// no validation rules for Linger

	// no validation rules for Speed

	
	
	}
}
/**
	 * Validates {@code ScanAddNode} protobuf objects.
	 */
	public static class ScanAddNodeValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.ScanAddNode> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.ScanAddNode proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Index

	// no validation rules for DayZoomTableValue

	// no validation rules for HeatZoomTableValue

	// no validation rules for Azimuth

	// no validation rules for Elevation

	// no validation rules for Linger

	// no validation rules for Speed

	
	
	}
}
/**
	 * Validates {@code Elevation} protobuf objects.
	 */
	public static class ElevationValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.Elevation> {
	
	
		


	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.Elevation proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
	
		
			switch (proto.getCmdCase()) {
				case SET_VALUE:
					
			// Validate set_value
			if (proto.hasSetValue()) index.validatorFor(proto.getSetValue()).assertValid(proto.getSetValue());
					break;
				case ROTATE_TO:
					
			// Validate rotate_to
			if (proto.hasRotateTo()) index.validatorFor(proto.getRotateTo()).assertValid(proto.getRotateTo());
					break;
				case ROTATE:
					
			// Validate rotate
			if (proto.hasRotate()) index.validatorFor(proto.getRotate()).assertValid(proto.getRotate());
					break;
				case RELATIVE:
					
			// Validate relative
			if (proto.hasRelative()) index.validatorFor(proto.getRelative()).assertValid(proto.getRelative());
					break;
				case RELATIVE_SET:
					
			// Validate relative_set
			if (proto.hasRelativeSet()) index.validatorFor(proto.getRelativeSet()).assertValid(proto.getRelativeSet());
					break;
				case HALT:
					
			// Validate halt
			if (proto.hasHalt()) index.validatorFor(proto.getHalt()).assertValid(proto.getHalt());
					break;
				
			}

	}
}
/**
	 * Validates {@code SetUseRotaryAsCompass} protobuf objects.
	 */
	public static class SetUseRotaryAsCompassValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.setUseRotaryAsCompass> {
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.setUseRotaryAsCompass proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Flag

	
	
	}
}
/**
	 * Validates {@code RotateToGPS} protobuf objects.
	 */
	public static class RotateToGPSValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateToGPS> {
		
	
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateToGPS proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Altitude

	
	
	}
}
/**
	 * Validates {@code SetOriginGPS} protobuf objects.
	 */
	public static class SetOriginGPSValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.SetOriginGPS> {
		
	
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.SetOriginGPS proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Altitude

	
	
	}
}
/**
	 * Validates {@code RotateToNDC} protobuf objects.
	 */
	public static class RotateToNDCValidator implements io.envoyproxy.pgv.ValidatorImpl<cmd.RotaryPlatform.JonSharedCmdRotary.RotateToNDC> {
		
	
		
	
		
	
	
	

	public void assertValid(cmd.RotaryPlatform.JonSharedCmdRotary.RotateToNDC proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Channel

	// no validation rules for X

	// no validation rules for Y

	
	
	}
}
}

