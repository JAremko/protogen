// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jon_shared_data.proto

#include "jon_shared_data.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr JonGUIState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        system_{nullptr},
        meteo_internal_{nullptr},
        lrf_{nullptr},
        time_{nullptr},
        gps_{nullptr},
        compass_{nullptr},
        rotary_{nullptr},
        camera_day_{nullptr},
        camera_heat_{nullptr},
        compass_calibration_{nullptr},
        rec_osd_{nullptr},
        day_cam_glass_heater_{nullptr},
        actual_space_time_{nullptr},
        protocol_version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR JonGUIState::JonGUIState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JonGUIStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGUIStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGUIStateDefaultTypeInternal() {}
  union {
    JonGUIState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGUIStateDefaultTypeInternal _JonGUIState_default_instance_;
}  // namespace ser
static ::_pb::Metadata file_level_metadata_jon_5fshared_5fdata_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_2eproto = nullptr;
const ::uint32_t TableStruct_jon_5fshared_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.protocol_version_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.system_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.meteo_internal_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.lrf_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.gps_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.compass_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.rotary_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.camera_day_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.camera_heat_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.compass_calibration_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.rec_osd_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.day_cam_glass_heater_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.actual_space_time_),
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 22, -1, sizeof(::ser::JonGUIState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGUIState_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025jon_shared_data.proto\022\003ser\032\033jon_shared"
    "_data_types.proto\032\032jon_shared_data_time."
    "proto\032\034jon_shared_data_system.proto\032\031jon"
    "_shared_data_lrf.proto\032\031jon_shared_data_"
    "gps.proto\032\035jon_shared_data_compass.proto"
    "\032)jon_shared_data_compass_calibration.pr"
    "oto\032\034jon_shared_data_rotary.proto\032 jon_s"
    "hared_data_camera_day.proto\032!jon_shared_"
    "data_camera_heat.proto\032\035jon_shared_data_"
    "rec_osd.proto\032*jon_shared_data_day_cam_g"
    "lass_heater.proto\032\'jon_shared_data_actua"
    "l_space_time.proto\"\362\004\n\013JonGUIState\022\030\n\020pr"
    "otocol_version\030\001 \001(\r\022%\n\006system\030\002 \001(\0132\025.s"
    "er.JonGuiDataSystem\022,\n\016meteo_internal\030\003 "
    "\001(\0132\024.ser.JonGuiDataMeteo\022\037\n\003lrf\030\004 \001(\0132\022"
    ".ser.JonGuiDataLrf\022!\n\004time\030\005 \001(\0132\023.ser.J"
    "onGuiDataTime\022\037\n\003gps\030\006 \001(\0132\022.ser.JonGuiD"
    "ataGps\022\'\n\007compass\030\007 \001(\0132\026.ser.JonGuiData"
    "Compass\022%\n\006rotary\030\010 \001(\0132\025.ser.JonGuiData"
    "Rotary\022,\n\ncamera_day\030\t \001(\0132\030.ser.JonGuiD"
    "ataCameraDay\022.\n\013camera_heat\030\n \001(\0132\031.ser."
    "JonGuiDataCameraHeat\022>\n\023compass_calibrat"
    "ion\030\013 \001(\0132!.ser.JonGuiDataCompassCalibra"
    "tion\022&\n\007rec_osd\030\014 \001(\0132\025.ser.JonGuiDataRe"
    "cOsd\022>\n\024day_cam_glass_heater\030\r \001(\0132 .ser"
    ".JonGuiDataDayCamGlassHeater\0229\n\021actual_s"
    "pace_time\030\016 \001(\0132\036.ser.JonGuiDataActualSp"
    "aceTimeBGZEgit-codecommit.eu-central-1.a"
    "mazonaws.com/v1/repos/jettison/jonp/data"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fdata_2eproto_deps[13] =
    {
        &::descriptor_table_jon_5fshared_5fdata_5factual_5fspace_5ftime_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fcamera_5fday_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fday_5fcam_5fglass_5fheater_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fgps_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5flrf_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5frec_5fosd_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5frotary_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5ftime_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_2eproto = {
    false,
    false,
    1168,
    descriptor_table_protodef_jon_5fshared_5fdata_2eproto,
    "jon_shared_data.proto",
    &descriptor_table_jon_5fshared_5fdata_2eproto_once,
    descriptor_table_jon_5fshared_5fdata_2eproto_deps,
    13,
    1,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_2eproto::offsets,
    file_level_metadata_jon_5fshared_5fdata_2eproto,
    file_level_enum_descriptors_jon_5fshared_5fdata_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_jon_5fshared_5fdata_2eproto_getter() {
  return &descriptor_table_jon_5fshared_5fdata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_jon_5fshared_5fdata_2eproto(&descriptor_table_jon_5fshared_5fdata_2eproto);
namespace ser {
// ===================================================================

class JonGUIState::_Internal {
 public:
  using HasBits = decltype(std::declval<JonGUIState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_._has_bits_);
  static const ::ser::JonGuiDataSystem& system(const JonGUIState* msg);
  static void set_has_system(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ser::JonGuiDataMeteo& meteo_internal(const JonGUIState* msg);
  static void set_has_meteo_internal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ser::JonGuiDataLrf& lrf(const JonGUIState* msg);
  static void set_has_lrf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ser::JonGuiDataTime& time(const JonGUIState* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ser::JonGuiDataGps& gps(const JonGUIState* msg);
  static void set_has_gps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ser::JonGuiDataCompass& compass(const JonGUIState* msg);
  static void set_has_compass(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ser::JonGuiDataRotary& rotary(const JonGUIState* msg);
  static void set_has_rotary(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ser::JonGuiDataCameraDay& camera_day(const JonGUIState* msg);
  static void set_has_camera_day(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ser::JonGuiDataCameraHeat& camera_heat(const JonGUIState* msg);
  static void set_has_camera_heat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ser::JonGuiDataCompassCalibration& compass_calibration(const JonGUIState* msg);
  static void set_has_compass_calibration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ser::JonGuiDataRecOsd& rec_osd(const JonGUIState* msg);
  static void set_has_rec_osd(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ser::JonGuiDataDayCamGlassHeater& day_cam_glass_heater(const JonGUIState* msg);
  static void set_has_day_cam_glass_heater(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::ser::JonGuiDataActualSpaceTime& actual_space_time(const JonGUIState* msg);
  static void set_has_actual_space_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::ser::JonGuiDataSystem& JonGUIState::_Internal::system(const JonGUIState* msg) {
  return *msg->_impl_.system_;
}
const ::ser::JonGuiDataMeteo& JonGUIState::_Internal::meteo_internal(const JonGUIState* msg) {
  return *msg->_impl_.meteo_internal_;
}
const ::ser::JonGuiDataLrf& JonGUIState::_Internal::lrf(const JonGUIState* msg) {
  return *msg->_impl_.lrf_;
}
const ::ser::JonGuiDataTime& JonGUIState::_Internal::time(const JonGUIState* msg) {
  return *msg->_impl_.time_;
}
const ::ser::JonGuiDataGps& JonGUIState::_Internal::gps(const JonGUIState* msg) {
  return *msg->_impl_.gps_;
}
const ::ser::JonGuiDataCompass& JonGUIState::_Internal::compass(const JonGUIState* msg) {
  return *msg->_impl_.compass_;
}
const ::ser::JonGuiDataRotary& JonGUIState::_Internal::rotary(const JonGUIState* msg) {
  return *msg->_impl_.rotary_;
}
const ::ser::JonGuiDataCameraDay& JonGUIState::_Internal::camera_day(const JonGUIState* msg) {
  return *msg->_impl_.camera_day_;
}
const ::ser::JonGuiDataCameraHeat& JonGUIState::_Internal::camera_heat(const JonGUIState* msg) {
  return *msg->_impl_.camera_heat_;
}
const ::ser::JonGuiDataCompassCalibration& JonGUIState::_Internal::compass_calibration(const JonGUIState* msg) {
  return *msg->_impl_.compass_calibration_;
}
const ::ser::JonGuiDataRecOsd& JonGUIState::_Internal::rec_osd(const JonGUIState* msg) {
  return *msg->_impl_.rec_osd_;
}
const ::ser::JonGuiDataDayCamGlassHeater& JonGUIState::_Internal::day_cam_glass_heater(const JonGUIState* msg) {
  return *msg->_impl_.day_cam_glass_heater_;
}
const ::ser::JonGuiDataActualSpaceTime& JonGUIState::_Internal::actual_space_time(const JonGUIState* msg) {
  return *msg->_impl_.actual_space_time_;
}
void JonGUIState::clear_system() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.system_ != nullptr) _impl_.system_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void JonGUIState::clear_meteo_internal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.meteo_internal_ != nullptr) _impl_.meteo_internal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void JonGUIState::clear_lrf() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lrf_ != nullptr) _impl_.lrf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void JonGUIState::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void JonGUIState::clear_gps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.gps_ != nullptr) _impl_.gps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void JonGUIState::clear_compass() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.compass_ != nullptr) _impl_.compass_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void JonGUIState::clear_rotary() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rotary_ != nullptr) _impl_.rotary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void JonGUIState::clear_camera_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.camera_day_ != nullptr) _impl_.camera_day_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void JonGUIState::clear_camera_heat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.camera_heat_ != nullptr) _impl_.camera_heat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void JonGUIState::clear_compass_calibration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.compass_calibration_ != nullptr) _impl_.compass_calibration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void JonGUIState::clear_rec_osd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rec_osd_ != nullptr) _impl_.rec_osd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void JonGUIState::clear_day_cam_glass_heater() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.day_cam_glass_heater_ != nullptr) _impl_.day_cam_glass_heater_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void JonGUIState::clear_actual_space_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.actual_space_time_ != nullptr) _impl_.actual_space_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
JonGUIState::JonGUIState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGUIState)
}
inline PROTOBUF_NDEBUG_INLINE JonGUIState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

JonGUIState::JonGUIState(
    ::google::protobuf::Arena* arena,
    const JonGUIState& from)
    : ::google::protobuf::Message(arena) {
  JonGUIState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.system_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::ser::JonGuiDataSystem>(arena, *from._impl_.system_)
                : nullptr;
  _impl_.meteo_internal_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::ser::JonGuiDataMeteo>(arena, *from._impl_.meteo_internal_)
                : nullptr;
  _impl_.lrf_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::ser::JonGuiDataLrf>(arena, *from._impl_.lrf_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::ser::JonGuiDataTime>(arena, *from._impl_.time_)
                : nullptr;
  _impl_.gps_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::ser::JonGuiDataGps>(arena, *from._impl_.gps_)
                : nullptr;
  _impl_.compass_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::ser::JonGuiDataCompass>(arena, *from._impl_.compass_)
                : nullptr;
  _impl_.rotary_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::ser::JonGuiDataRotary>(arena, *from._impl_.rotary_)
                : nullptr;
  _impl_.camera_day_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::ser::JonGuiDataCameraDay>(arena, *from._impl_.camera_day_)
                : nullptr;
  _impl_.camera_heat_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::ser::JonGuiDataCameraHeat>(arena, *from._impl_.camera_heat_)
                : nullptr;
  _impl_.compass_calibration_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::ser::JonGuiDataCompassCalibration>(arena, *from._impl_.compass_calibration_)
                : nullptr;
  _impl_.rec_osd_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::ser::JonGuiDataRecOsd>(arena, *from._impl_.rec_osd_)
                : nullptr;
  _impl_.day_cam_glass_heater_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::ser::JonGuiDataDayCamGlassHeater>(arena, *from._impl_.day_cam_glass_heater_)
                : nullptr;
  _impl_.actual_space_time_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::ser::JonGuiDataActualSpaceTime>(arena, *from._impl_.actual_space_time_)
                : nullptr;
  _impl_.protocol_version_ = from._impl_.protocol_version_;

  // @@protoc_insertion_point(copy_constructor:ser.JonGUIState)
}
inline PROTOBUF_NDEBUG_INLINE JonGUIState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGUIState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, system_),
           0,
           offsetof(Impl_, protocol_version_) -
               offsetof(Impl_, system_) +
               sizeof(Impl_::protocol_version_));
}
JonGUIState::~JonGUIState() {
  // @@protoc_insertion_point(destructor:ser.JonGUIState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JonGUIState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.system_;
  delete _impl_.meteo_internal_;
  delete _impl_.lrf_;
  delete _impl_.time_;
  delete _impl_.gps_;
  delete _impl_.compass_;
  delete _impl_.rotary_;
  delete _impl_.camera_day_;
  delete _impl_.camera_heat_;
  delete _impl_.compass_calibration_;
  delete _impl_.rec_osd_;
  delete _impl_.day_cam_glass_heater_;
  delete _impl_.actual_space_time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void JonGUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGUIState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.system_ != nullptr);
      _impl_.system_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.meteo_internal_ != nullptr);
      _impl_.meteo_internal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.lrf_ != nullptr);
      _impl_.lrf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.gps_ != nullptr);
      _impl_.gps_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.compass_ != nullptr);
      _impl_.compass_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.rotary_ != nullptr);
      _impl_.rotary_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.camera_day_ != nullptr);
      _impl_.camera_day_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.camera_heat_ != nullptr);
      _impl_.camera_heat_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.compass_calibration_ != nullptr);
      _impl_.compass_calibration_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.rec_osd_ != nullptr);
      _impl_.rec_osd_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.day_cam_glass_heater_ != nullptr);
      _impl_.day_cam_glass_heater_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.actual_space_time_ != nullptr);
      _impl_.actual_space_time_->Clear();
    }
  }
  _impl_.protocol_version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JonGUIState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 13, 0, 2> JonGUIState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_JonGUIState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 protocol_version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGUIState, _impl_.protocol_version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.protocol_version_)}},
    // .ser.JonGuiDataSystem system = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.system_)}},
    // .ser.JonGuiDataMeteo meteo_internal = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.meteo_internal_)}},
    // .ser.JonGuiDataLrf lrf = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.lrf_)}},
    // .ser.JonGuiDataTime time = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 3, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.time_)}},
    // .ser.JonGuiDataGps gps = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.gps_)}},
    // .ser.JonGuiDataCompass compass = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 5, 5, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.compass_)}},
    // .ser.JonGuiDataRotary rotary = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 6, 6, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.rotary_)}},
    // .ser.JonGuiDataCameraDay camera_day = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 7, 7, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.camera_day_)}},
    // .ser.JonGuiDataCameraHeat camera_heat = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 8, 8, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.camera_heat_)}},
    // .ser.JonGuiDataCompassCalibration compass_calibration = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 9, 9, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.compass_calibration_)}},
    // .ser.JonGuiDataRecOsd rec_osd = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 10, 10, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.rec_osd_)}},
    // .ser.JonGuiDataDayCamGlassHeater day_cam_glass_heater = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 11, 11, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.day_cam_glass_heater_)}},
    // .ser.JonGuiDataActualSpaceTime actual_space_time = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 12, 12, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.actual_space_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 protocol_version = 1;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.protocol_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .ser.JonGuiDataSystem system = 2;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.system_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataMeteo meteo_internal = 3;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.meteo_internal_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataLrf lrf = 4;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.lrf_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataTime time = 5;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataGps gps = 6;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.gps_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataCompass compass = 7;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.compass_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataRotary rotary = 8;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.rotary_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataCameraDay camera_day = 9;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.camera_day_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataCameraHeat camera_heat = 10;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.camera_heat_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataCompassCalibration compass_calibration = 11;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.compass_calibration_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataRecOsd rec_osd = 12;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.rec_osd_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataDayCamGlassHeater day_cam_glass_heater = 13;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.day_cam_glass_heater_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataActualSpaceTime actual_space_time = 14;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.actual_space_time_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataSystem>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataMeteo>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataLrf>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataTime>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataGps>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataCompass>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataRotary>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataCameraDay>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataCameraHeat>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataCompassCalibration>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataRecOsd>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataDayCamGlassHeater>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataActualSpaceTime>()},
  }}, {{
  }},
};

::uint8_t* JonGUIState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ser.JonGUIState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_protocol_version(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ser.JonGuiDataSystem system = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::system(this),
        _Internal::system(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataMeteo meteo_internal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::meteo_internal(this),
        _Internal::meteo_internal(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataLrf lrf = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::lrf(this),
        _Internal::lrf(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataTime time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataGps gps = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::gps(this),
        _Internal::gps(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataCompass compass = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::compass(this),
        _Internal::compass(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataRotary rotary = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::rotary(this),
        _Internal::rotary(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataCameraDay camera_day = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::camera_day(this),
        _Internal::camera_day(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataCameraHeat camera_heat = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::camera_heat(this),
        _Internal::camera_heat(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataCompassCalibration compass_calibration = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::compass_calibration(this),
        _Internal::compass_calibration(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataRecOsd rec_osd = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::rec_osd(this),
        _Internal::rec_osd(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataDayCamGlassHeater day_cam_glass_heater = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, _Internal::day_cam_glass_heater(this),
        _Internal::day_cam_glass_heater(this).GetCachedSize(), target, stream);
  }

  // .ser.JonGuiDataActualSpaceTime actual_space_time = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, _Internal::actual_space_time(this),
        _Internal::actual_space_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.JonGUIState)
  return target;
}

::size_t JonGUIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.JonGUIState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .ser.JonGuiDataSystem system = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.system_);
    }

    // .ser.JonGuiDataMeteo meteo_internal = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.meteo_internal_);
    }

    // .ser.JonGuiDataLrf lrf = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.lrf_);
    }

    // .ser.JonGuiDataTime time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

    // .ser.JonGuiDataGps gps = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gps_);
    }

    // .ser.JonGuiDataCompass compass = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.compass_);
    }

    // .ser.JonGuiDataRotary rotary = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rotary_);
    }

    // .ser.JonGuiDataCameraDay camera_day = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.camera_day_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // .ser.JonGuiDataCameraHeat camera_heat = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.camera_heat_);
    }

    // .ser.JonGuiDataCompassCalibration compass_calibration = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.compass_calibration_);
    }

    // .ser.JonGuiDataRecOsd rec_osd = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rec_osd_);
    }

    // .ser.JonGuiDataDayCamGlassHeater day_cam_glass_heater = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.day_cam_glass_heater_);
    }

    // .ser.JonGuiDataActualSpaceTime actual_space_time = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.actual_space_time_);
    }

  }
  // uint32 protocol_version = 1;
  if (this->_internal_protocol_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_protocol_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JonGUIState::_class_data_ = {
    JonGUIState::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* JonGUIState::GetClassData() const {
  return &_class_data_;
}

void JonGUIState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JonGUIState*>(&to_msg);
  auto& from = static_cast<const JonGUIState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGUIState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_system()->::ser::JonGuiDataSystem::MergeFrom(
          from._internal_system());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_meteo_internal()->::ser::JonGuiDataMeteo::MergeFrom(
          from._internal_meteo_internal());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_lrf()->::ser::JonGuiDataLrf::MergeFrom(
          from._internal_lrf());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_time()->::ser::JonGuiDataTime::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_gps()->::ser::JonGuiDataGps::MergeFrom(
          from._internal_gps());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_compass()->::ser::JonGuiDataCompass::MergeFrom(
          from._internal_compass());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_rotary()->::ser::JonGuiDataRotary::MergeFrom(
          from._internal_rotary());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_camera_day()->::ser::JonGuiDataCameraDay::MergeFrom(
          from._internal_camera_day());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_camera_heat()->::ser::JonGuiDataCameraHeat::MergeFrom(
          from._internal_camera_heat());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_compass_calibration()->::ser::JonGuiDataCompassCalibration::MergeFrom(
          from._internal_compass_calibration());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_rec_osd()->::ser::JonGuiDataRecOsd::MergeFrom(
          from._internal_rec_osd());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_day_cam_glass_heater()->::ser::JonGuiDataDayCamGlassHeater::MergeFrom(
          from._internal_day_cam_glass_heater());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_actual_space_time()->::ser::JonGuiDataActualSpaceTime::MergeFrom(
          from._internal_actual_space_time());
    }
  }
  if (from._internal_protocol_version() != 0) {
    _this->_internal_set_protocol_version(from._internal_protocol_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGUIState::CopyFrom(const JonGUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JonGUIState::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* JonGUIState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void JonGUIState::InternalSwap(JonGUIState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.protocol_version_)
      + sizeof(JonGUIState::_impl_.protocol_version_)
      - PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.system_)>(
          reinterpret_cast<char*>(&_impl_.system_),
          reinterpret_cast<char*>(&other->_impl_.system_));
}

::google::protobuf::Metadata JonGUIState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_jon_5fshared_5fdata_2eproto_getter, &descriptor_table_jon_5fshared_5fdata_2eproto_once,
      file_level_metadata_jon_5fshared_5fdata_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
