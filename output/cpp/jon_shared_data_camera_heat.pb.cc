// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jon_shared_data_camera_heat.proto

#include "jon_shared_data_camera_heat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr JonGuiDataCameraHeat::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : zoom_pos_{0},
        agc_mode_{static_cast< ::ser::JonGuiDataVideoChannelHeatAGCModes >(0)},
        filter_{static_cast< ::ser::JonGuiDataVideoChannelHeatFilters >(0)},
        zoom_table_pos_{0},
        zoom_table_pos_max_{0},
        auto_focus_{false},
        dde_enabled_{false},
        dde_level_{0},
        fx_mode_{static_cast< ::ser::JonGuiDataFxModeHeat >(0)},
        digital_zoom_level_{0},
        clahe_level_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JonGuiDataCameraHeat::JonGuiDataCameraHeat(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JonGuiDataCameraHeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGuiDataCameraHeatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGuiDataCameraHeatDefaultTypeInternal() {}
  union {
    JonGuiDataCameraHeat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGuiDataCameraHeatDefaultTypeInternal _JonGuiDataCameraHeat_default_instance_;
}  // namespace ser
static ::_pb::Metadata file_level_metadata_jon_5fshared_5fdata_5fcamera_5fheat_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_5fcamera_5fheat_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_5fcamera_5fheat_2eproto = nullptr;
const ::uint32_t TableStruct_jon_5fshared_5fdata_5fcamera_5fheat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.zoom_pos_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.agc_mode_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.filter_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.auto_focus_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.zoom_table_pos_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.zoom_table_pos_max_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.dde_level_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.dde_enabled_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.fx_mode_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.digital_zoom_level_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCameraHeat, _impl_.clahe_level_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ser::JonGuiDataCameraHeat)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGuiDataCameraHeat_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_5fcamera_5fheat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!jon_shared_data_camera_heat.proto\022\003ser"
    "\032\033jon_shared_data_types.proto\"\350\002\n\024JonGui"
    "DataCameraHeat\022\020\n\010zoom_pos\030\001 \001(\002\0229\n\010agc_"
    "mode\030\002 \001(\0162\'.ser.JonGuiDataVideoChannelH"
    "eatAGCModes\0226\n\006filter\030\003 \001(\0162&.ser.JonGui"
    "DataVideoChannelHeatFilters\022\022\n\nauto_focu"
    "s\030\004 \001(\010\022\026\n\016zoom_table_pos\030\005 \001(\005\022\032\n\022zoom_"
    "table_pos_max\030\006 \001(\005\022\021\n\tdde_level\030\007 \001(\005\022\023"
    "\n\013dde_enabled\030\010 \001(\010\022*\n\007fx_mode\030\t \001(\0162\031.s"
    "er.JonGuiDataFxModeHeat\022\032\n\022digital_zoom_"
    "level\030\n \001(\002\022\023\n\013clahe_level\030\013 \001(\002BSZQgit-"
    "codecommit.eu-central-1.amazonaws.com/v1"
    "/repos/jettison/jonp/data/camera_heatb\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto_deps[1] =
    {
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto = {
    false,
    false,
    525,
    descriptor_table_protodef_jon_5fshared_5fdata_5fcamera_5fheat_2eproto,
    "jon_shared_data_camera_heat.proto",
    &descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto_once,
    descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_5fcamera_5fheat_2eproto::offsets,
    file_level_metadata_jon_5fshared_5fdata_5fcamera_5fheat_2eproto,
    file_level_enum_descriptors_jon_5fshared_5fdata_5fcamera_5fheat_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_5fcamera_5fheat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto_getter() {
  return &descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_jon_5fshared_5fdata_5fcamera_5fheat_2eproto(&descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto);
namespace ser {
// ===================================================================

class JonGuiDataCameraHeat::_Internal {
 public:
};

JonGuiDataCameraHeat::JonGuiDataCameraHeat(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGuiDataCameraHeat)
}
JonGuiDataCameraHeat::JonGuiDataCameraHeat(
    ::google::protobuf::Arena* arena, const JonGuiDataCameraHeat& from)
    : JonGuiDataCameraHeat(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataCameraHeat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGuiDataCameraHeat::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zoom_pos_),
           0,
           offsetof(Impl_, clahe_level_) -
               offsetof(Impl_, zoom_pos_) +
               sizeof(Impl_::clahe_level_));
}
JonGuiDataCameraHeat::~JonGuiDataCameraHeat() {
  // @@protoc_insertion_point(destructor:ser.JonGuiDataCameraHeat)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JonGuiDataCameraHeat::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void JonGuiDataCameraHeat::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGuiDataCameraHeat)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.zoom_pos_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.clahe_level_) -
      reinterpret_cast<char*>(&_impl_.zoom_pos_)) + sizeof(_impl_.clahe_level_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JonGuiDataCameraHeat::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 0, 2> JonGuiDataCameraHeat::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_JonGuiDataCameraHeat_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float zoom_pos = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.zoom_pos_)}},
    // .ser.JonGuiDataVideoChannelHeatAGCModes agc_mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCameraHeat, _impl_.agc_mode_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.agc_mode_)}},
    // .ser.JonGuiDataVideoChannelHeatFilters filter = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCameraHeat, _impl_.filter_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.filter_)}},
    // bool auto_focus = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataCameraHeat, _impl_.auto_focus_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.auto_focus_)}},
    // int32 zoom_table_pos = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCameraHeat, _impl_.zoom_table_pos_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.zoom_table_pos_)}},
    // int32 zoom_table_pos_max = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCameraHeat, _impl_.zoom_table_pos_max_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.zoom_table_pos_max_)}},
    // int32 dde_level = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCameraHeat, _impl_.dde_level_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.dde_level_)}},
    // bool dde_enabled = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataCameraHeat, _impl_.dde_enabled_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.dde_enabled_)}},
    // .ser.JonGuiDataFxModeHeat fx_mode = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCameraHeat, _impl_.fx_mode_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.fx_mode_)}},
    // float digital_zoom_level = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.digital_zoom_level_)}},
    // float clahe_level = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.clahe_level_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float zoom_pos = 1;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.zoom_pos_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .ser.JonGuiDataVideoChannelHeatAGCModes agc_mode = 2;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.agc_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .ser.JonGuiDataVideoChannelHeatFilters filter = 3;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.filter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool auto_focus = 4;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.auto_focus_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 zoom_table_pos = 5;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.zoom_table_pos_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 zoom_table_pos_max = 6;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.zoom_table_pos_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 dde_level = 7;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.dde_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool dde_enabled = 8;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.dde_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .ser.JonGuiDataFxModeHeat fx_mode = 9;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.fx_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float digital_zoom_level = 10;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.digital_zoom_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float clahe_level = 11;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.clahe_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* JonGuiDataCameraHeat::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ser.JonGuiDataCameraHeat)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float zoom_pos = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zoom_pos = this->_internal_zoom_pos();
  ::uint32_t raw_zoom_pos;
  memcpy(&raw_zoom_pos, &tmp_zoom_pos, sizeof(tmp_zoom_pos));
  if (raw_zoom_pos != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_zoom_pos(), target);
  }

  // .ser.JonGuiDataVideoChannelHeatAGCModes agc_mode = 2;
  if (this->_internal_agc_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_agc_mode(), target);
  }

  // .ser.JonGuiDataVideoChannelHeatFilters filter = 3;
  if (this->_internal_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_filter(), target);
  }

  // bool auto_focus = 4;
  if (this->_internal_auto_focus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_auto_focus(), target);
  }

  // int32 zoom_table_pos = 5;
  if (this->_internal_zoom_table_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_zoom_table_pos(), target);
  }

  // int32 zoom_table_pos_max = 6;
  if (this->_internal_zoom_table_pos_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_zoom_table_pos_max(), target);
  }

  // int32 dde_level = 7;
  if (this->_internal_dde_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_dde_level(), target);
  }

  // bool dde_enabled = 8;
  if (this->_internal_dde_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_dde_enabled(), target);
  }

  // .ser.JonGuiDataFxModeHeat fx_mode = 9;
  if (this->_internal_fx_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_fx_mode(), target);
  }

  // float digital_zoom_level = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_digital_zoom_level = this->_internal_digital_zoom_level();
  ::uint32_t raw_digital_zoom_level;
  memcpy(&raw_digital_zoom_level, &tmp_digital_zoom_level, sizeof(tmp_digital_zoom_level));
  if (raw_digital_zoom_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_digital_zoom_level(), target);
  }

  // float clahe_level = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clahe_level = this->_internal_clahe_level();
  ::uint32_t raw_clahe_level;
  memcpy(&raw_clahe_level, &tmp_clahe_level, sizeof(tmp_clahe_level));
  if (raw_clahe_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_clahe_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.JonGuiDataCameraHeat)
  return target;
}

::size_t JonGuiDataCameraHeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.JonGuiDataCameraHeat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float zoom_pos = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zoom_pos = this->_internal_zoom_pos();
  ::uint32_t raw_zoom_pos;
  memcpy(&raw_zoom_pos, &tmp_zoom_pos, sizeof(tmp_zoom_pos));
  if (raw_zoom_pos != 0) {
    total_size += 5;
  }

  // .ser.JonGuiDataVideoChannelHeatAGCModes agc_mode = 2;
  if (this->_internal_agc_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_agc_mode());
  }

  // .ser.JonGuiDataVideoChannelHeatFilters filter = 3;
  if (this->_internal_filter() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_filter());
  }

  // int32 zoom_table_pos = 5;
  if (this->_internal_zoom_table_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_zoom_table_pos());
  }

  // int32 zoom_table_pos_max = 6;
  if (this->_internal_zoom_table_pos_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_zoom_table_pos_max());
  }

  // bool auto_focus = 4;
  if (this->_internal_auto_focus() != 0) {
    total_size += 2;
  }

  // bool dde_enabled = 8;
  if (this->_internal_dde_enabled() != 0) {
    total_size += 2;
  }

  // int32 dde_level = 7;
  if (this->_internal_dde_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_dde_level());
  }

  // .ser.JonGuiDataFxModeHeat fx_mode = 9;
  if (this->_internal_fx_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_fx_mode());
  }

  // float digital_zoom_level = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_digital_zoom_level = this->_internal_digital_zoom_level();
  ::uint32_t raw_digital_zoom_level;
  memcpy(&raw_digital_zoom_level, &tmp_digital_zoom_level, sizeof(tmp_digital_zoom_level));
  if (raw_digital_zoom_level != 0) {
    total_size += 5;
  }

  // float clahe_level = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clahe_level = this->_internal_clahe_level();
  ::uint32_t raw_clahe_level;
  memcpy(&raw_clahe_level, &tmp_clahe_level, sizeof(tmp_clahe_level));
  if (raw_clahe_level != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JonGuiDataCameraHeat::_class_data_ = {
    JonGuiDataCameraHeat::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* JonGuiDataCameraHeat::GetClassData() const {
  return &_class_data_;
}

void JonGuiDataCameraHeat::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JonGuiDataCameraHeat*>(&to_msg);
  auto& from = static_cast<const JonGuiDataCameraHeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGuiDataCameraHeat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_zoom_pos = from._internal_zoom_pos();
  ::uint32_t raw_zoom_pos;
  memcpy(&raw_zoom_pos, &tmp_zoom_pos, sizeof(tmp_zoom_pos));
  if (raw_zoom_pos != 0) {
    _this->_internal_set_zoom_pos(from._internal_zoom_pos());
  }
  if (from._internal_agc_mode() != 0) {
    _this->_internal_set_agc_mode(from._internal_agc_mode());
  }
  if (from._internal_filter() != 0) {
    _this->_internal_set_filter(from._internal_filter());
  }
  if (from._internal_zoom_table_pos() != 0) {
    _this->_internal_set_zoom_table_pos(from._internal_zoom_table_pos());
  }
  if (from._internal_zoom_table_pos_max() != 0) {
    _this->_internal_set_zoom_table_pos_max(from._internal_zoom_table_pos_max());
  }
  if (from._internal_auto_focus() != 0) {
    _this->_internal_set_auto_focus(from._internal_auto_focus());
  }
  if (from._internal_dde_enabled() != 0) {
    _this->_internal_set_dde_enabled(from._internal_dde_enabled());
  }
  if (from._internal_dde_level() != 0) {
    _this->_internal_set_dde_level(from._internal_dde_level());
  }
  if (from._internal_fx_mode() != 0) {
    _this->_internal_set_fx_mode(from._internal_fx_mode());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_digital_zoom_level = from._internal_digital_zoom_level();
  ::uint32_t raw_digital_zoom_level;
  memcpy(&raw_digital_zoom_level, &tmp_digital_zoom_level, sizeof(tmp_digital_zoom_level));
  if (raw_digital_zoom_level != 0) {
    _this->_internal_set_digital_zoom_level(from._internal_digital_zoom_level());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clahe_level = from._internal_clahe_level();
  ::uint32_t raw_clahe_level;
  memcpy(&raw_clahe_level, &tmp_clahe_level, sizeof(tmp_clahe_level));
  if (raw_clahe_level != 0) {
    _this->_internal_set_clahe_level(from._internal_clahe_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGuiDataCameraHeat::CopyFrom(const JonGuiDataCameraHeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGuiDataCameraHeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JonGuiDataCameraHeat::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* JonGuiDataCameraHeat::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void JonGuiDataCameraHeat::InternalSwap(JonGuiDataCameraHeat* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.clahe_level_)
      + sizeof(JonGuiDataCameraHeat::_impl_.clahe_level_)
      - PROTOBUF_FIELD_OFFSET(JonGuiDataCameraHeat, _impl_.zoom_pos_)>(
          reinterpret_cast<char*>(&_impl_.zoom_pos_),
          reinterpret_cast<char*>(&other->_impl_.zoom_pos_));
}

::google::protobuf::Metadata JonGuiDataCameraHeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto_getter, &descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto_once,
      file_level_metadata_jon_5fshared_5fdata_5fcamera_5fheat_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
