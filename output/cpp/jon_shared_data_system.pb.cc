// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jon_shared_data_system.proto

#include "jon_shared_data_system.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr JonGuiDataSystem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cpu_temperature_{0},
        gpu_temperature_{0},
        gpu_load_{0},
        cpu_load_{0},
        power_consumption_{0},
        loc_{static_cast< ::ser::JonGuiDataSystemLocalizations >(0)},
        cur_video_rec_dir_year_{0},
        cur_video_rec_dir_month_{0},
        cur_video_rec_dir_day_{0},
        cur_video_rec_dir_hour_{0},
        cur_video_rec_dir_minute_{0},
        cur_video_rec_dir_second_{0},
        rec_enabled_{false},
        important_rec_enabled_{false},
        low_disk_space_{false},
        no_disk_space_{false},
        disk_space_{0},
        tracking_{false},
        vampire_mode_{false},
        stabilization_mode_{false},
        geodesic_mode_{false},
        cv_dumping_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JonGuiDataSystem::JonGuiDataSystem(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JonGuiDataSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGuiDataSystemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGuiDataSystemDefaultTypeInternal() {}
  union {
    JonGuiDataSystem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGuiDataSystemDefaultTypeInternal _JonGuiDataSystem_default_instance_;
}  // namespace ser
static ::_pb::Metadata file_level_metadata_jon_5fshared_5fdata_5fsystem_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_5fsystem_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_5fsystem_2eproto = nullptr;
const ::uint32_t TableStruct_jon_5fshared_5fdata_5fsystem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cpu_temperature_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.gpu_temperature_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.gpu_load_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cpu_load_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.power_consumption_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.loc_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_year_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_month_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_day_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_hour_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_minute_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_second_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.rec_enabled_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.important_rec_enabled_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.low_disk_space_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.no_disk_space_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.disk_space_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.tracking_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.vampire_mode_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.stabilization_mode_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.geodesic_mode_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cv_dumping_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ser::JonGuiDataSystem)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGuiDataSystem_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_5fsystem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034jon_shared_data_system.proto\022\003ser\032\033jon"
    "_shared_data_types.proto\"\336\004\n\020JonGuiDataS"
    "ystem\022\027\n\017cpu_temperature\030\001 \001(\002\022\027\n\017gpu_te"
    "mperature\030\002 \001(\002\022\020\n\010gpu_load\030\003 \001(\002\022\020\n\010cpu"
    "_load\030\004 \001(\002\022\031\n\021power_consumption\030\005 \001(\002\022/"
    "\n\003loc\030\006 \001(\0162\".ser.JonGuiDataSystemLocali"
    "zations\022\036\n\026cur_video_rec_dir_year\030\007 \001(\005\022"
    "\037\n\027cur_video_rec_dir_month\030\010 \001(\005\022\035\n\025cur_"
    "video_rec_dir_day\030\t \001(\005\022\036\n\026cur_video_rec"
    "_dir_hour\030\n \001(\005\022 \n\030cur_video_rec_dir_min"
    "ute\030\013 \001(\005\022 \n\030cur_video_rec_dir_second\030\014 "
    "\001(\005\022\023\n\013rec_enabled\030\r \001(\010\022\035\n\025important_re"
    "c_enabled\030\016 \001(\010\022\026\n\016low_disk_space\030\017 \001(\010\022"
    "\025\n\rno_disk_space\030\020 \001(\010\022\022\n\ndisk_space\030\021 \001"
    "(\005\022\020\n\010tracking\030\022 \001(\010\022\024\n\014vampire_mode\030\023 \001"
    "(\010\022\032\n\022stabilization_mode\030\024 \001(\010\022\025\n\rgeodes"
    "ic_mode\030\025 \001(\010\022\022\n\ncv_dumping\030\026 \001(\010BNZLgit"
    "-codecommit.eu-central-1.amazonaws.com/v"
    "1/repos/jettison/jonp/data/systemb\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_deps[1] =
    {
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto = {
    false,
    false,
    761,
    descriptor_table_protodef_jon_5fshared_5fdata_5fsystem_2eproto,
    "jon_shared_data_system.proto",
    &descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_once,
    descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_5fsystem_2eproto::offsets,
    file_level_metadata_jon_5fshared_5fdata_5fsystem_2eproto,
    file_level_enum_descriptors_jon_5fshared_5fdata_5fsystem_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_5fsystem_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_getter() {
  return &descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_jon_5fshared_5fdata_5fsystem_2eproto(&descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto);
namespace ser {
// ===================================================================

class JonGuiDataSystem::_Internal {
 public:
};

JonGuiDataSystem::JonGuiDataSystem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGuiDataSystem)
}
JonGuiDataSystem::JonGuiDataSystem(
    ::google::protobuf::Arena* arena, const JonGuiDataSystem& from)
    : JonGuiDataSystem(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataSystem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGuiDataSystem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cpu_temperature_),
           0,
           offsetof(Impl_, cv_dumping_) -
               offsetof(Impl_, cpu_temperature_) +
               sizeof(Impl_::cv_dumping_));
}
JonGuiDataSystem::~JonGuiDataSystem() {
  // @@protoc_insertion_point(destructor:ser.JonGuiDataSystem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JonGuiDataSystem::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void JonGuiDataSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGuiDataSystem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cpu_temperature_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cv_dumping_) -
      reinterpret_cast<char*>(&_impl_.cpu_temperature_)) + sizeof(_impl_.cv_dumping_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JonGuiDataSystem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 22, 0, 0, 2> JonGuiDataSystem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290772992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    22,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_JonGuiDataSystem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float cpu_temperature = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_temperature_)}},
    // float gpu_temperature = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.gpu_temperature_)}},
    // float gpu_load = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.gpu_load_)}},
    // float cpu_load = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_load_)}},
    // float power_consumption = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.power_consumption_)}},
    // .ser.JonGuiDataSystemLocalizations loc = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.loc_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.loc_)}},
    // int32 cur_video_rec_dir_year = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_year_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_year_)}},
    // int32 cur_video_rec_dir_month = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_month_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_month_)}},
    // int32 cur_video_rec_dir_day = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_day_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_day_)}},
    // int32 cur_video_rec_dir_hour = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_hour_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_hour_)}},
    // int32 cur_video_rec_dir_minute = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_minute_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_minute_)}},
    // int32 cur_video_rec_dir_second = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_second_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_second_)}},
    // bool rec_enabled = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataSystem, _impl_.rec_enabled_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.rec_enabled_)}},
    // bool important_rec_enabled = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataSystem, _impl_.important_rec_enabled_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.important_rec_enabled_)}},
    // bool low_disk_space = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataSystem, _impl_.low_disk_space_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.low_disk_space_)}},
    // bool no_disk_space = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.no_disk_space_)}},
    // int32 disk_space = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.disk_space_)}},
    // bool tracking = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.tracking_)}},
    // bool vampire_mode = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.vampire_mode_)}},
    // bool stabilization_mode = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.stabilization_mode_)}},
    // bool geodesic_mode = 21;
    {::_pbi::TcParser::FastV8S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.geodesic_mode_)}},
    // bool cv_dumping = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cv_dumping_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float cpu_temperature = 1;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float gpu_temperature = 2;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.gpu_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float gpu_load = 3;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.gpu_load_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float cpu_load = 4;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_load_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float power_consumption = 5;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.power_consumption_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .ser.JonGuiDataSystemLocalizations loc = 6;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.loc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 cur_video_rec_dir_year = 7;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_year_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_month = 8;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_month_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_day = 9;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_day_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_hour = 10;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_hour_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_minute = 11;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_minute_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_second = 12;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_second_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool rec_enabled = 13;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.rec_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool important_rec_enabled = 14;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.important_rec_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool low_disk_space = 15;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.low_disk_space_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool no_disk_space = 16;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.no_disk_space_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 disk_space = 17;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.disk_space_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool tracking = 18;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.tracking_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool vampire_mode = 19;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.vampire_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool stabilization_mode = 20;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.stabilization_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool geodesic_mode = 21;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.geodesic_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool cv_dumping = 22;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cv_dumping_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* JonGuiDataSystem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ser.JonGuiDataSystem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float cpu_temperature = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_temperature = this->_internal_cpu_temperature();
  ::uint32_t raw_cpu_temperature;
  memcpy(&raw_cpu_temperature, &tmp_cpu_temperature, sizeof(tmp_cpu_temperature));
  if (raw_cpu_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_cpu_temperature(), target);
  }

  // float gpu_temperature = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gpu_temperature = this->_internal_gpu_temperature();
  ::uint32_t raw_gpu_temperature;
  memcpy(&raw_gpu_temperature, &tmp_gpu_temperature, sizeof(tmp_gpu_temperature));
  if (raw_gpu_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_gpu_temperature(), target);
  }

  // float gpu_load = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gpu_load = this->_internal_gpu_load();
  ::uint32_t raw_gpu_load;
  memcpy(&raw_gpu_load, &tmp_gpu_load, sizeof(tmp_gpu_load));
  if (raw_gpu_load != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_gpu_load(), target);
  }

  // float cpu_load = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_load = this->_internal_cpu_load();
  ::uint32_t raw_cpu_load;
  memcpy(&raw_cpu_load, &tmp_cpu_load, sizeof(tmp_cpu_load));
  if (raw_cpu_load != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_cpu_load(), target);
  }

  // float power_consumption = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_consumption = this->_internal_power_consumption();
  ::uint32_t raw_power_consumption;
  memcpy(&raw_power_consumption, &tmp_power_consumption, sizeof(tmp_power_consumption));
  if (raw_power_consumption != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_power_consumption(), target);
  }

  // .ser.JonGuiDataSystemLocalizations loc = 6;
  if (this->_internal_loc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_loc(), target);
  }

  // int32 cur_video_rec_dir_year = 7;
  if (this->_internal_cur_video_rec_dir_year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_cur_video_rec_dir_year(), target);
  }

  // int32 cur_video_rec_dir_month = 8;
  if (this->_internal_cur_video_rec_dir_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_cur_video_rec_dir_month(), target);
  }

  // int32 cur_video_rec_dir_day = 9;
  if (this->_internal_cur_video_rec_dir_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_cur_video_rec_dir_day(), target);
  }

  // int32 cur_video_rec_dir_hour = 10;
  if (this->_internal_cur_video_rec_dir_hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_cur_video_rec_dir_hour(), target);
  }

  // int32 cur_video_rec_dir_minute = 11;
  if (this->_internal_cur_video_rec_dir_minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_cur_video_rec_dir_minute(), target);
  }

  // int32 cur_video_rec_dir_second = 12;
  if (this->_internal_cur_video_rec_dir_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_cur_video_rec_dir_second(), target);
  }

  // bool rec_enabled = 13;
  if (this->_internal_rec_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_rec_enabled(), target);
  }

  // bool important_rec_enabled = 14;
  if (this->_internal_important_rec_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_important_rec_enabled(), target);
  }

  // bool low_disk_space = 15;
  if (this->_internal_low_disk_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_low_disk_space(), target);
  }

  // bool no_disk_space = 16;
  if (this->_internal_no_disk_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_no_disk_space(), target);
  }

  // int32 disk_space = 17;
  if (this->_internal_disk_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this->_internal_disk_space(), target);
  }

  // bool tracking = 18;
  if (this->_internal_tracking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_tracking(), target);
  }

  // bool vampire_mode = 19;
  if (this->_internal_vampire_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_vampire_mode(), target);
  }

  // bool stabilization_mode = 20;
  if (this->_internal_stabilization_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_stabilization_mode(), target);
  }

  // bool geodesic_mode = 21;
  if (this->_internal_geodesic_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_geodesic_mode(), target);
  }

  // bool cv_dumping = 22;
  if (this->_internal_cv_dumping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_cv_dumping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.JonGuiDataSystem)
  return target;
}

::size_t JonGuiDataSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.JonGuiDataSystem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float cpu_temperature = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_temperature = this->_internal_cpu_temperature();
  ::uint32_t raw_cpu_temperature;
  memcpy(&raw_cpu_temperature, &tmp_cpu_temperature, sizeof(tmp_cpu_temperature));
  if (raw_cpu_temperature != 0) {
    total_size += 5;
  }

  // float gpu_temperature = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gpu_temperature = this->_internal_gpu_temperature();
  ::uint32_t raw_gpu_temperature;
  memcpy(&raw_gpu_temperature, &tmp_gpu_temperature, sizeof(tmp_gpu_temperature));
  if (raw_gpu_temperature != 0) {
    total_size += 5;
  }

  // float gpu_load = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gpu_load = this->_internal_gpu_load();
  ::uint32_t raw_gpu_load;
  memcpy(&raw_gpu_load, &tmp_gpu_load, sizeof(tmp_gpu_load));
  if (raw_gpu_load != 0) {
    total_size += 5;
  }

  // float cpu_load = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_load = this->_internal_cpu_load();
  ::uint32_t raw_cpu_load;
  memcpy(&raw_cpu_load, &tmp_cpu_load, sizeof(tmp_cpu_load));
  if (raw_cpu_load != 0) {
    total_size += 5;
  }

  // float power_consumption = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_consumption = this->_internal_power_consumption();
  ::uint32_t raw_power_consumption;
  memcpy(&raw_power_consumption, &tmp_power_consumption, sizeof(tmp_power_consumption));
  if (raw_power_consumption != 0) {
    total_size += 5;
  }

  // .ser.JonGuiDataSystemLocalizations loc = 6;
  if (this->_internal_loc() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_loc());
  }

  // int32 cur_video_rec_dir_year = 7;
  if (this->_internal_cur_video_rec_dir_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cur_video_rec_dir_year());
  }

  // int32 cur_video_rec_dir_month = 8;
  if (this->_internal_cur_video_rec_dir_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cur_video_rec_dir_month());
  }

  // int32 cur_video_rec_dir_day = 9;
  if (this->_internal_cur_video_rec_dir_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cur_video_rec_dir_day());
  }

  // int32 cur_video_rec_dir_hour = 10;
  if (this->_internal_cur_video_rec_dir_hour() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cur_video_rec_dir_hour());
  }

  // int32 cur_video_rec_dir_minute = 11;
  if (this->_internal_cur_video_rec_dir_minute() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cur_video_rec_dir_minute());
  }

  // int32 cur_video_rec_dir_second = 12;
  if (this->_internal_cur_video_rec_dir_second() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cur_video_rec_dir_second());
  }

  // bool rec_enabled = 13;
  if (this->_internal_rec_enabled() != 0) {
    total_size += 2;
  }

  // bool important_rec_enabled = 14;
  if (this->_internal_important_rec_enabled() != 0) {
    total_size += 2;
  }

  // bool low_disk_space = 15;
  if (this->_internal_low_disk_space() != 0) {
    total_size += 2;
  }

  // bool no_disk_space = 16;
  if (this->_internal_no_disk_space() != 0) {
    total_size += 3;
  }

  // int32 disk_space = 17;
  if (this->_internal_disk_space() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_disk_space());
  }

  // bool tracking = 18;
  if (this->_internal_tracking() != 0) {
    total_size += 3;
  }

  // bool vampire_mode = 19;
  if (this->_internal_vampire_mode() != 0) {
    total_size += 3;
  }

  // bool stabilization_mode = 20;
  if (this->_internal_stabilization_mode() != 0) {
    total_size += 3;
  }

  // bool geodesic_mode = 21;
  if (this->_internal_geodesic_mode() != 0) {
    total_size += 3;
  }

  // bool cv_dumping = 22;
  if (this->_internal_cv_dumping() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JonGuiDataSystem::_class_data_ = {
    JonGuiDataSystem::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* JonGuiDataSystem::GetClassData() const {
  return &_class_data_;
}

void JonGuiDataSystem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JonGuiDataSystem*>(&to_msg);
  auto& from = static_cast<const JonGuiDataSystem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGuiDataSystem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_temperature = from._internal_cpu_temperature();
  ::uint32_t raw_cpu_temperature;
  memcpy(&raw_cpu_temperature, &tmp_cpu_temperature, sizeof(tmp_cpu_temperature));
  if (raw_cpu_temperature != 0) {
    _this->_internal_set_cpu_temperature(from._internal_cpu_temperature());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gpu_temperature = from._internal_gpu_temperature();
  ::uint32_t raw_gpu_temperature;
  memcpy(&raw_gpu_temperature, &tmp_gpu_temperature, sizeof(tmp_gpu_temperature));
  if (raw_gpu_temperature != 0) {
    _this->_internal_set_gpu_temperature(from._internal_gpu_temperature());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gpu_load = from._internal_gpu_load();
  ::uint32_t raw_gpu_load;
  memcpy(&raw_gpu_load, &tmp_gpu_load, sizeof(tmp_gpu_load));
  if (raw_gpu_load != 0) {
    _this->_internal_set_gpu_load(from._internal_gpu_load());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_load = from._internal_cpu_load();
  ::uint32_t raw_cpu_load;
  memcpy(&raw_cpu_load, &tmp_cpu_load, sizeof(tmp_cpu_load));
  if (raw_cpu_load != 0) {
    _this->_internal_set_cpu_load(from._internal_cpu_load());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_consumption = from._internal_power_consumption();
  ::uint32_t raw_power_consumption;
  memcpy(&raw_power_consumption, &tmp_power_consumption, sizeof(tmp_power_consumption));
  if (raw_power_consumption != 0) {
    _this->_internal_set_power_consumption(from._internal_power_consumption());
  }
  if (from._internal_loc() != 0) {
    _this->_internal_set_loc(from._internal_loc());
  }
  if (from._internal_cur_video_rec_dir_year() != 0) {
    _this->_internal_set_cur_video_rec_dir_year(from._internal_cur_video_rec_dir_year());
  }
  if (from._internal_cur_video_rec_dir_month() != 0) {
    _this->_internal_set_cur_video_rec_dir_month(from._internal_cur_video_rec_dir_month());
  }
  if (from._internal_cur_video_rec_dir_day() != 0) {
    _this->_internal_set_cur_video_rec_dir_day(from._internal_cur_video_rec_dir_day());
  }
  if (from._internal_cur_video_rec_dir_hour() != 0) {
    _this->_internal_set_cur_video_rec_dir_hour(from._internal_cur_video_rec_dir_hour());
  }
  if (from._internal_cur_video_rec_dir_minute() != 0) {
    _this->_internal_set_cur_video_rec_dir_minute(from._internal_cur_video_rec_dir_minute());
  }
  if (from._internal_cur_video_rec_dir_second() != 0) {
    _this->_internal_set_cur_video_rec_dir_second(from._internal_cur_video_rec_dir_second());
  }
  if (from._internal_rec_enabled() != 0) {
    _this->_internal_set_rec_enabled(from._internal_rec_enabled());
  }
  if (from._internal_important_rec_enabled() != 0) {
    _this->_internal_set_important_rec_enabled(from._internal_important_rec_enabled());
  }
  if (from._internal_low_disk_space() != 0) {
    _this->_internal_set_low_disk_space(from._internal_low_disk_space());
  }
  if (from._internal_no_disk_space() != 0) {
    _this->_internal_set_no_disk_space(from._internal_no_disk_space());
  }
  if (from._internal_disk_space() != 0) {
    _this->_internal_set_disk_space(from._internal_disk_space());
  }
  if (from._internal_tracking() != 0) {
    _this->_internal_set_tracking(from._internal_tracking());
  }
  if (from._internal_vampire_mode() != 0) {
    _this->_internal_set_vampire_mode(from._internal_vampire_mode());
  }
  if (from._internal_stabilization_mode() != 0) {
    _this->_internal_set_stabilization_mode(from._internal_stabilization_mode());
  }
  if (from._internal_geodesic_mode() != 0) {
    _this->_internal_set_geodesic_mode(from._internal_geodesic_mode());
  }
  if (from._internal_cv_dumping() != 0) {
    _this->_internal_set_cv_dumping(from._internal_cv_dumping());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGuiDataSystem::CopyFrom(const JonGuiDataSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGuiDataSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JonGuiDataSystem::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* JonGuiDataSystem::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void JonGuiDataSystem::InternalSwap(JonGuiDataSystem* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cv_dumping_)
      + sizeof(JonGuiDataSystem::_impl_.cv_dumping_)
      - PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_temperature_)>(
          reinterpret_cast<char*>(&_impl_.cpu_temperature_),
          reinterpret_cast<char*>(&other->_impl_.cpu_temperature_));
}

::google::protobuf::Metadata JonGuiDataSystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_getter, &descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_once,
      file_level_metadata_jon_5fshared_5fdata_5fsystem_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
