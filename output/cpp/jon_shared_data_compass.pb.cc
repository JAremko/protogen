// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jon_shared_data_compass.proto

#include "jon_shared_data_compass.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr JonGuiDataCompass::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : azimuth_{0},
        elevation_{0},
        bank_{0},
        offsetazimuth_{0},
        offsetelevation_{0},
        magneticdeclination_{0},
        calibrating_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JonGuiDataCompass::JonGuiDataCompass(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JonGuiDataCompassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGuiDataCompassDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGuiDataCompassDefaultTypeInternal() {}
  union {
    JonGuiDataCompass _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGuiDataCompassDefaultTypeInternal _JonGuiDataCompass_default_instance_;
}  // namespace ser
static ::_pb::Metadata file_level_metadata_jon_5fshared_5fdata_5fcompass_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_5fcompass_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_5fcompass_2eproto = nullptr;
const ::uint32_t TableStruct_jon_5fshared_5fdata_5fcompass_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompass, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompass, _impl_.azimuth_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompass, _impl_.elevation_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompass, _impl_.bank_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompass, _impl_.offsetazimuth_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompass, _impl_.offsetelevation_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompass, _impl_.magneticdeclination_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompass, _impl_.calibrating_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ser::JonGuiDataCompass)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGuiDataCompass_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_5fcompass_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035jon_shared_data_compass.proto\022\003ser\"\247\001\n"
    "\021JonGuiDataCompass\022\017\n\007azimuth\030\001 \001(\001\022\021\n\te"
    "levation\030\002 \001(\001\022\014\n\004bank\030\003 \001(\001\022\025\n\roffsetAz"
    "imuth\030\004 \001(\001\022\027\n\017offsetElevation\030\005 \001(\001\022\033\n\023"
    "magneticDeclination\030\006 \001(\001\022\023\n\013calibrating"
    "\030\007 \001(\010BOZMgit-codecommit.eu-central-1.am"
    "azonaws.com/v1/repos/jettison/jonp/data/"
    "compassb\006proto3"
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto = {
    false,
    false,
    295,
    descriptor_table_protodef_jon_5fshared_5fdata_5fcompass_2eproto,
    "jon_shared_data_compass.proto",
    &descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_5fcompass_2eproto::offsets,
    file_level_metadata_jon_5fshared_5fdata_5fcompass_2eproto,
    file_level_enum_descriptors_jon_5fshared_5fdata_5fcompass_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_5fcompass_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto_getter() {
  return &descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_jon_5fshared_5fdata_5fcompass_2eproto(&descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto);
namespace ser {
// ===================================================================

class JonGuiDataCompass::_Internal {
 public:
};

JonGuiDataCompass::JonGuiDataCompass(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGuiDataCompass)
}
JonGuiDataCompass::JonGuiDataCompass(
    ::google::protobuf::Arena* arena, const JonGuiDataCompass& from)
    : JonGuiDataCompass(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataCompass::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGuiDataCompass::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, azimuth_),
           0,
           offsetof(Impl_, calibrating_) -
               offsetof(Impl_, azimuth_) +
               sizeof(Impl_::calibrating_));
}
JonGuiDataCompass::~JonGuiDataCompass() {
  // @@protoc_insertion_point(destructor:ser.JonGuiDataCompass)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JonGuiDataCompass::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void JonGuiDataCompass::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGuiDataCompass)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.azimuth_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.calibrating_) -
      reinterpret_cast<char*>(&_impl_.azimuth_)) + sizeof(_impl_.calibrating_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JonGuiDataCompass::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> JonGuiDataCompass::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_JonGuiDataCompass_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double azimuth = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.azimuth_)}},
    // double elevation = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.elevation_)}},
    // double bank = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.bank_)}},
    // double offsetAzimuth = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.offsetazimuth_)}},
    // double offsetElevation = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.offsetelevation_)}},
    // double magneticDeclination = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.magneticdeclination_)}},
    // bool calibrating = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataCompass, _impl_.calibrating_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.calibrating_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double azimuth = 1;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.azimuth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double elevation = 2;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.elevation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double bank = 3;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.bank_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double offsetAzimuth = 4;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.offsetazimuth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double offsetElevation = 5;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.offsetelevation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double magneticDeclination = 6;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.magneticdeclination_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool calibrating = 7;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.calibrating_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* JonGuiDataCompass::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ser.JonGuiDataCompass)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double azimuth = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_azimuth = this->_internal_azimuth();
  ::uint64_t raw_azimuth;
  memcpy(&raw_azimuth, &tmp_azimuth, sizeof(tmp_azimuth));
  if (raw_azimuth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_azimuth(), target);
  }

  // double elevation = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_elevation = this->_internal_elevation();
  ::uint64_t raw_elevation;
  memcpy(&raw_elevation, &tmp_elevation, sizeof(tmp_elevation));
  if (raw_elevation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_elevation(), target);
  }

  // double bank = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_bank = this->_internal_bank();
  ::uint64_t raw_bank;
  memcpy(&raw_bank, &tmp_bank, sizeof(tmp_bank));
  if (raw_bank != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_bank(), target);
  }

  // double offsetAzimuth = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offsetazimuth = this->_internal_offsetazimuth();
  ::uint64_t raw_offsetazimuth;
  memcpy(&raw_offsetazimuth, &tmp_offsetazimuth, sizeof(tmp_offsetazimuth));
  if (raw_offsetazimuth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_offsetazimuth(), target);
  }

  // double offsetElevation = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offsetelevation = this->_internal_offsetelevation();
  ::uint64_t raw_offsetelevation;
  memcpy(&raw_offsetelevation, &tmp_offsetelevation, sizeof(tmp_offsetelevation));
  if (raw_offsetelevation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_offsetelevation(), target);
  }

  // double magneticDeclination = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_magneticdeclination = this->_internal_magneticdeclination();
  ::uint64_t raw_magneticdeclination;
  memcpy(&raw_magneticdeclination, &tmp_magneticdeclination, sizeof(tmp_magneticdeclination));
  if (raw_magneticdeclination != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_magneticdeclination(), target);
  }

  // bool calibrating = 7;
  if (this->_internal_calibrating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_calibrating(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.JonGuiDataCompass)
  return target;
}

::size_t JonGuiDataCompass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.JonGuiDataCompass)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double azimuth = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_azimuth = this->_internal_azimuth();
  ::uint64_t raw_azimuth;
  memcpy(&raw_azimuth, &tmp_azimuth, sizeof(tmp_azimuth));
  if (raw_azimuth != 0) {
    total_size += 9;
  }

  // double elevation = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_elevation = this->_internal_elevation();
  ::uint64_t raw_elevation;
  memcpy(&raw_elevation, &tmp_elevation, sizeof(tmp_elevation));
  if (raw_elevation != 0) {
    total_size += 9;
  }

  // double bank = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_bank = this->_internal_bank();
  ::uint64_t raw_bank;
  memcpy(&raw_bank, &tmp_bank, sizeof(tmp_bank));
  if (raw_bank != 0) {
    total_size += 9;
  }

  // double offsetAzimuth = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offsetazimuth = this->_internal_offsetazimuth();
  ::uint64_t raw_offsetazimuth;
  memcpy(&raw_offsetazimuth, &tmp_offsetazimuth, sizeof(tmp_offsetazimuth));
  if (raw_offsetazimuth != 0) {
    total_size += 9;
  }

  // double offsetElevation = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offsetelevation = this->_internal_offsetelevation();
  ::uint64_t raw_offsetelevation;
  memcpy(&raw_offsetelevation, &tmp_offsetelevation, sizeof(tmp_offsetelevation));
  if (raw_offsetelevation != 0) {
    total_size += 9;
  }

  // double magneticDeclination = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_magneticdeclination = this->_internal_magneticdeclination();
  ::uint64_t raw_magneticdeclination;
  memcpy(&raw_magneticdeclination, &tmp_magneticdeclination, sizeof(tmp_magneticdeclination));
  if (raw_magneticdeclination != 0) {
    total_size += 9;
  }

  // bool calibrating = 7;
  if (this->_internal_calibrating() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JonGuiDataCompass::_class_data_ = {
    JonGuiDataCompass::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* JonGuiDataCompass::GetClassData() const {
  return &_class_data_;
}

void JonGuiDataCompass::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JonGuiDataCompass*>(&to_msg);
  auto& from = static_cast<const JonGuiDataCompass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGuiDataCompass)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_azimuth = from._internal_azimuth();
  ::uint64_t raw_azimuth;
  memcpy(&raw_azimuth, &tmp_azimuth, sizeof(tmp_azimuth));
  if (raw_azimuth != 0) {
    _this->_internal_set_azimuth(from._internal_azimuth());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_elevation = from._internal_elevation();
  ::uint64_t raw_elevation;
  memcpy(&raw_elevation, &tmp_elevation, sizeof(tmp_elevation));
  if (raw_elevation != 0) {
    _this->_internal_set_elevation(from._internal_elevation());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_bank = from._internal_bank();
  ::uint64_t raw_bank;
  memcpy(&raw_bank, &tmp_bank, sizeof(tmp_bank));
  if (raw_bank != 0) {
    _this->_internal_set_bank(from._internal_bank());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offsetazimuth = from._internal_offsetazimuth();
  ::uint64_t raw_offsetazimuth;
  memcpy(&raw_offsetazimuth, &tmp_offsetazimuth, sizeof(tmp_offsetazimuth));
  if (raw_offsetazimuth != 0) {
    _this->_internal_set_offsetazimuth(from._internal_offsetazimuth());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offsetelevation = from._internal_offsetelevation();
  ::uint64_t raw_offsetelevation;
  memcpy(&raw_offsetelevation, &tmp_offsetelevation, sizeof(tmp_offsetelevation));
  if (raw_offsetelevation != 0) {
    _this->_internal_set_offsetelevation(from._internal_offsetelevation());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_magneticdeclination = from._internal_magneticdeclination();
  ::uint64_t raw_magneticdeclination;
  memcpy(&raw_magneticdeclination, &tmp_magneticdeclination, sizeof(tmp_magneticdeclination));
  if (raw_magneticdeclination != 0) {
    _this->_internal_set_magneticdeclination(from._internal_magneticdeclination());
  }
  if (from._internal_calibrating() != 0) {
    _this->_internal_set_calibrating(from._internal_calibrating());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGuiDataCompass::CopyFrom(const JonGuiDataCompass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGuiDataCompass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JonGuiDataCompass::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* JonGuiDataCompass::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void JonGuiDataCompass::InternalSwap(JonGuiDataCompass* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.calibrating_)
      + sizeof(JonGuiDataCompass::_impl_.calibrating_)
      - PROTOBUF_FIELD_OFFSET(JonGuiDataCompass, _impl_.azimuth_)>(
          reinterpret_cast<char*>(&_impl_.azimuth_),
          reinterpret_cast<char*>(&other->_impl_.azimuth_));
}

::google::protobuf::Metadata JonGuiDataCompass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto_getter, &descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto_once,
      file_level_metadata_jon_5fshared_5fdata_5fcompass_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
