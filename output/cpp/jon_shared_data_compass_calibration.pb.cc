// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jon_shared_data_compass_calibration.proto

#include "jon_shared_data_compass_calibration.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr JonGuiDataCompassCalibration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stage_{0u},
        final_stage_{0u},
        target_azimuth_{0},
        target_elevation_{0},
        target_bank_{0},
        status_{static_cast< ::ser::JonGuiDataCompassCalibrateStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JonGuiDataCompassCalibration::JonGuiDataCompassCalibration(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct JonGuiDataCompassCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGuiDataCompassCalibrationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGuiDataCompassCalibrationDefaultTypeInternal() {}
  union {
    JonGuiDataCompassCalibration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGuiDataCompassCalibrationDefaultTypeInternal _JonGuiDataCompassCalibration_default_instance_;
}  // namespace ser
static ::_pb::Metadata file_level_metadata_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto = nullptr;
const ::uint32_t TableStruct_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompassCalibration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompassCalibration, _impl_.stage_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompassCalibration, _impl_.final_stage_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompassCalibration, _impl_.target_azimuth_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompassCalibration, _impl_.target_elevation_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompassCalibration, _impl_.target_bank_),
    PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataCompassCalibration, _impl_.status_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ser::JonGuiDataCompassCalibration)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGuiDataCompassCalibration_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)jon_shared_data_compass_calibration.pr"
    "oto\022\003ser\032\033jon_shared_data_types.proto\"\300\001"
    "\n\034JonGuiDataCompassCalibration\022\r\n\005stage\030"
    "\001 \001(\r\022\023\n\013final_stage\030\002 \001(\r\022\026\n\016target_azi"
    "muth\030\003 \001(\001\022\030\n\020target_elevation\030\004 \001(\001\022\023\n\013"
    "target_bank\030\005 \001(\001\0225\n\006status\030\006 \001(\0162%.ser."
    "JonGuiDataCompassCalibrateStatusB[ZYgit-"
    "codecommit.eu-central-1.amazonaws.com/v1"
    "/repos/jettison/jonp/data/compass_calibr"
    "ationb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto_deps[1] =
    {
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto = {
    false,
    false,
    373,
    descriptor_table_protodef_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto,
    "jon_shared_data_compass_calibration.proto",
    &descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto_once,
    descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto::offsets,
    file_level_metadata_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto,
    file_level_enum_descriptors_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto_getter() {
  return &descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto(&descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto);
namespace ser {
// ===================================================================

class JonGuiDataCompassCalibration::_Internal {
 public:
};

JonGuiDataCompassCalibration::JonGuiDataCompassCalibration(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGuiDataCompassCalibration)
}
JonGuiDataCompassCalibration::JonGuiDataCompassCalibration(
    ::google::protobuf::Arena* arena, const JonGuiDataCompassCalibration& from)
    : JonGuiDataCompassCalibration(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataCompassCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGuiDataCompassCalibration::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stage_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, stage_) +
               sizeof(Impl_::status_));
}
JonGuiDataCompassCalibration::~JonGuiDataCompassCalibration() {
  // @@protoc_insertion_point(destructor:ser.JonGuiDataCompassCalibration)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JonGuiDataCompassCalibration::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void JonGuiDataCompassCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGuiDataCompassCalibration)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.stage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.stage_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JonGuiDataCompassCalibration::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> JonGuiDataCompassCalibration::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_JonGuiDataCompassCalibration_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 stage = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCompassCalibration, _impl_.stage_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.stage_)}},
    // uint32 final_stage = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCompassCalibration, _impl_.final_stage_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.final_stage_)}},
    // double target_azimuth = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.target_azimuth_)}},
    // double target_elevation = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.target_elevation_)}},
    // double target_bank = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.target_bank_)}},
    // .ser.JonGuiDataCompassCalibrateStatus status = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataCompassCalibration, _impl_.status_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.status_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 stage = 1;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.stage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 final_stage = 2;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.final_stage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // double target_azimuth = 3;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.target_azimuth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double target_elevation = 4;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.target_elevation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double target_bank = 5;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.target_bank_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .ser.JonGuiDataCompassCalibrateStatus status = 6;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* JonGuiDataCompassCalibration::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ser.JonGuiDataCompassCalibration)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 stage = 1;
  if (this->_internal_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_stage(), target);
  }

  // uint32 final_stage = 2;
  if (this->_internal_final_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_final_stage(), target);
  }

  // double target_azimuth = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_azimuth = this->_internal_target_azimuth();
  ::uint64_t raw_target_azimuth;
  memcpy(&raw_target_azimuth, &tmp_target_azimuth, sizeof(tmp_target_azimuth));
  if (raw_target_azimuth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_target_azimuth(), target);
  }

  // double target_elevation = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_elevation = this->_internal_target_elevation();
  ::uint64_t raw_target_elevation;
  memcpy(&raw_target_elevation, &tmp_target_elevation, sizeof(tmp_target_elevation));
  if (raw_target_elevation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_target_elevation(), target);
  }

  // double target_bank = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_bank = this->_internal_target_bank();
  ::uint64_t raw_target_bank;
  memcpy(&raw_target_bank, &tmp_target_bank, sizeof(tmp_target_bank));
  if (raw_target_bank != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_target_bank(), target);
  }

  // .ser.JonGuiDataCompassCalibrateStatus status = 6;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.JonGuiDataCompassCalibration)
  return target;
}

::size_t JonGuiDataCompassCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.JonGuiDataCompassCalibration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 stage = 1;
  if (this->_internal_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_stage());
  }

  // uint32 final_stage = 2;
  if (this->_internal_final_stage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_final_stage());
  }

  // double target_azimuth = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_azimuth = this->_internal_target_azimuth();
  ::uint64_t raw_target_azimuth;
  memcpy(&raw_target_azimuth, &tmp_target_azimuth, sizeof(tmp_target_azimuth));
  if (raw_target_azimuth != 0) {
    total_size += 9;
  }

  // double target_elevation = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_elevation = this->_internal_target_elevation();
  ::uint64_t raw_target_elevation;
  memcpy(&raw_target_elevation, &tmp_target_elevation, sizeof(tmp_target_elevation));
  if (raw_target_elevation != 0) {
    total_size += 9;
  }

  // double target_bank = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_bank = this->_internal_target_bank();
  ::uint64_t raw_target_bank;
  memcpy(&raw_target_bank, &tmp_target_bank, sizeof(tmp_target_bank));
  if (raw_target_bank != 0) {
    total_size += 9;
  }

  // .ser.JonGuiDataCompassCalibrateStatus status = 6;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JonGuiDataCompassCalibration::_class_data_ = {
    JonGuiDataCompassCalibration::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* JonGuiDataCompassCalibration::GetClassData() const {
  return &_class_data_;
}

void JonGuiDataCompassCalibration::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JonGuiDataCompassCalibration*>(&to_msg);
  auto& from = static_cast<const JonGuiDataCompassCalibration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGuiDataCompassCalibration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stage() != 0) {
    _this->_internal_set_stage(from._internal_stage());
  }
  if (from._internal_final_stage() != 0) {
    _this->_internal_set_final_stage(from._internal_final_stage());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_azimuth = from._internal_target_azimuth();
  ::uint64_t raw_target_azimuth;
  memcpy(&raw_target_azimuth, &tmp_target_azimuth, sizeof(tmp_target_azimuth));
  if (raw_target_azimuth != 0) {
    _this->_internal_set_target_azimuth(from._internal_target_azimuth());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_elevation = from._internal_target_elevation();
  ::uint64_t raw_target_elevation;
  memcpy(&raw_target_elevation, &tmp_target_elevation, sizeof(tmp_target_elevation));
  if (raw_target_elevation != 0) {
    _this->_internal_set_target_elevation(from._internal_target_elevation());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_target_bank = from._internal_target_bank();
  ::uint64_t raw_target_bank;
  memcpy(&raw_target_bank, &tmp_target_bank, sizeof(tmp_target_bank));
  if (raw_target_bank != 0) {
    _this->_internal_set_target_bank(from._internal_target_bank());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGuiDataCompassCalibration::CopyFrom(const JonGuiDataCompassCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGuiDataCompassCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JonGuiDataCompassCalibration::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* JonGuiDataCompassCalibration::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void JonGuiDataCompassCalibration::InternalSwap(JonGuiDataCompassCalibration* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.status_)
      + sizeof(JonGuiDataCompassCalibration::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(JonGuiDataCompassCalibration, _impl_.stage_)>(
          reinterpret_cast<char*>(&_impl_.stage_),
          reinterpret_cast<char*>(&other->_impl_.stage_));
}

::google::protobuf::Metadata JonGuiDataCompassCalibration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto_getter, &descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto_once,
      file_level_metadata_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
